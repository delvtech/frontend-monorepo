{"mappings":"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","sources":["packages/graphql/src/index.ts","packages/graphql/src/client/getApolloLink.ts","packages/graphql/src/init.ts","packages/graphql/src/client/envelop.ts","packages/graphql/src/server/createServer.ts"],"sourcesContent":["export { default as getApolloLink } from \"./client/getApolloLink\";\r\nexport { default as createServer } from \"./server/createServer\";\r\nexport * from \"./init\";\r\n","import { ApolloLink, Observable } from \"@apollo/client\";\r\nimport init, { InitOptions } from \"src/init\";\r\nimport { handleQuery, envelopWithSchema } from \"./envelop\";\r\n\r\n/**\r\n * Create an `ApolloLink` instance for Apollo Client (specifically, a\r\n * terminating link) that manages executing queries in the client.\r\n * @param options An object for configuring the execution layer.\r\n * @param options.schemas An array of executable schemas with resolvers.\r\n * @param options.provider An ethers.js `Provider` instance that is added to the\r\n *   execution context for schema resolvers.\r\n * @returns An `ApolloLink` instance.\r\n */\r\nexport default function getApolloLink(options: InitOptions): ApolloLink {\r\n  const { schema, context } = init(options);\r\n  const getEnveloped = envelopWithSchema({\r\n    schema,\r\n    context,\r\n  });\r\n  return new ApolloLink(\r\n    ({ query, variables }) =>\r\n      new Observable((observer) => {\r\n        handleQuery({\r\n          query,\r\n          variables,\r\n          getEnveloped,\r\n          onError: (res) => {\r\n            observer.next(res);\r\n            observer.complete();\r\n          },\r\n          onSuccess: (res) => {\r\n            observer.next(res);\r\n            observer.complete();\r\n          },\r\n        });\r\n      }),\r\n  );\r\n}\r\n","import { Provider } from \"@ethersproject/providers\";\r\nimport { mergeSchemas } from \"@graphql-tools/schema\";\r\nimport { GraphQLSchema } from \"graphql\";\r\n\r\n// This is used by codegen for the context variable type in resolvers, so it's\r\n// important that any part of this package that's responsible for creating\r\n// context, creates this type.\r\nexport type ResolverContext<\r\n  T extends Record<string, any> = Record<string, any>,\r\n> = {\r\n  chainId: number;\r\n  provider: Provider;\r\n} & T;\r\n\r\nexport interface Graph {\r\n  schema: GraphQLSchema;\r\n  initContext?: (\r\n    initialContext: ResolverContext,\r\n  ) => Record<string, any> | Record<string, any>;\r\n}\r\n\r\nexport interface InitOptions {\r\n  graphs: Graph[];\r\n  provider: Provider;\r\n}\r\n\r\n/**\r\n * Initialize the schema and context from an array of `Graph`s.\r\n * @param options An object for configuring the execution layer.\r\n * @param options.graphs An array of `Graph`s which contain executable schemas\r\n *  and `initContext` functions.\r\n * @param options.provider An ethers.js `Provider` instance that is added to the\r\n *   execution context for schema resolvers.\r\n * @returns A single merged schema and context.\r\n */\r\nexport default function init({ graphs, provider }: InitOptions): {\r\n  schema: GraphQLSchema;\r\n  context: Promise<ResolverContext>;\r\n} {\r\n  const schemas = graphs.map(({ schema }) => schema);\r\n  return {\r\n    schema: mergeSchemas({ schemas }),\r\n    context: new Promise<ResolverContext>(async (resolve) => {\r\n      let chainId: number;\r\n      try {\r\n        // this will throw errors if the network can't be fetched (e.g., the\r\n        // provider is a local json rpc host and the network isn't running.)\r\n        const network = await provider.getNetwork();\r\n        chainId = network.chainId;\r\n      } catch {\r\n        chainId = 31337;\r\n      }\r\n      const initialContext = {\r\n        chainId,\r\n        provider,\r\n      };\r\n      let context = initialContext;\r\n      for (const { initContext } of graphs) {\r\n        context = {\r\n          ...context,\r\n          ...(await initContext?.(initialContext)),\r\n        };\r\n      }\r\n      resolve(context);\r\n    }),\r\n  };\r\n}\r\n","import {\r\n  DocumentNode,\r\n  ExecutionResult,\r\n  GraphQLError,\r\n  GraphQLSchema,\r\n} from \"graphql\";\r\nimport {\r\n  envelop,\r\n  useSchema,\r\n  useEnvelop,\r\n  GetEnvelopedFn as OriginalGetEnvelopedFn,\r\n  useExtendContext,\r\n} from \"@envelop/core\";\r\nimport { useParserCache } from \"@envelop/parser-cache\";\r\nimport { useValidationCache } from \"@envelop/validation-cache\";\r\nimport { ObjMap } from \"graphql/jsutils/ObjMap\";\r\nimport { ResolverContext } from \"src\";\r\n\r\n// Adds a default generic plugin context to make using the type easier.\r\nexport type GetEnvelopedFn<T = Record<string | number | symbol, any>> =\r\n  OriginalGetEnvelopedFn<T>;\r\n\r\n/**\r\n * A base GetEnvelopedFn that includes plugins that optimize execution.\r\n */\r\nexport const getEnvelopedBase = envelop({\r\n  plugins: [\r\n    /* eslint-disable react-hooks/rules-of-hooks */\r\n    useParserCache(),\r\n    useValidationCache(),\r\n    /* eslint-enable react-hooks/rules-of-hooks */\r\n  ],\r\n});\r\n\r\ninterface envelopWithSchemaOptions {\r\n  schema: GraphQLSchema;\r\n  context?: ResolverContext | Promise<ResolverContext>;\r\n}\r\n\r\n/**\r\n * Create a GetEnvelopedFn that uses given schema and optional context.\r\n * @param options\r\n * @param options.schema The `GraphQLSchema` to use.\r\n * @param options.context An optional object of properties to be added to the\r\n *   execution context.\r\n * @returns A `GetEnvelopedFn`\r\n */\r\nexport function envelopWithSchema({\r\n  schema,\r\n  context,\r\n}: envelopWithSchemaOptions): GetEnvelopedFn {\r\n  return envelop({\r\n    plugins: [\r\n      /* eslint-disable react-hooks/rules-of-hooks */\r\n      useSchema(schema),\r\n      useExtendContext(() => context),\r\n      useEnvelop(getEnvelopedBase),\r\n      /* eslint-enable react-hooks/rules-of-hooks */\r\n    ],\r\n  });\r\n}\r\n\r\nexport interface ErrorResult {\r\n  errors: ReadonlyArray<GraphQLError>;\r\n}\r\n\r\ninterface HandleQueryOptions {\r\n  query: DocumentNode;\r\n  variables: Record<string, any>;\r\n  getEnveloped: GetEnvelopedFn;\r\n  onError?: ({ errors }: ErrorResult) => void;\r\n  onSuccess?: <TData = ObjMap<unknown>, TExtensions = ObjMap<unknown>>(\r\n    result: ExecutionResult<ObjMap<TData>, ObjMap<TExtensions>>,\r\n  ) => void;\r\n}\r\n\r\n/**\r\n * Handle GraphQL queries by using a `GetEnvelopedFn` to validate and execute\r\n * them.\r\n * @param options\r\n * @param options.query A `DocumentNode` of the GraphQL query to execute.\r\n * @param options.variables An object containing variables for the query.\r\n * @param options.getEnveloped The `GetEnvelopedFn` that will be used to\r\n *   validate and execute the query.\r\n * @param options.onError An optional callback to call when there's an error.\r\n * @param options.onSuccess An optional callback to call when the query is\r\n *   executed successfully.\r\n */\r\nexport async function handleQuery({\r\n  query,\r\n  variables,\r\n  getEnveloped,\r\n  onError,\r\n  onSuccess,\r\n}: HandleQueryOptions): Promise<void> {\r\n  try {\r\n    const { validate, contextFactory, execute, schema } = getEnveloped({\r\n      query,\r\n      variables,\r\n    });\r\n\r\n    const validationErrors = validate(schema, query);\r\n    if (validationErrors.length) {\r\n      onError?.({ errors: validationErrors });\r\n    }\r\n\r\n    const contextValue = await contextFactory();\r\n\r\n    const result = await execute({\r\n      document: query,\r\n      schema,\r\n      variableValues: variables,\r\n      contextValue,\r\n    });\r\n    onSuccess?.(result);\r\n  } catch (caughtErr: any) {\r\n    onError?.({\r\n      errors: [\r\n        caughtErr instanceof GraphQLError\r\n          ? caughtErr\r\n          : new GraphQLError(caughtErr.message || caughtErr.toString()),\r\n      ],\r\n    });\r\n  }\r\n}\r\n","import {\r\n  createServer as createYogaServer,\r\n  YogaNodeServerInstance,\r\n} from \"@graphql-yoga/node\";\r\nimport { useEnvelop } from \"@envelop/core\";\r\nimport init, { InitOptions } from \"src/init\";\r\nimport { envelopWithSchema } from \"src/client/envelop\";\r\n\r\n/**\r\n * Create a Yoga Node Server instance with GraphiQL.\r\n * @param options An object for configuring the Yoga Server.\r\n * @param options.schemas An array of executable schemas with resolvers.\r\n * @param options.provider An ethers.js `Provider` instance that is added to the\r\n *   execution context for schema resolvers.\r\n * @returns An `YogaNodeServerInstance` instance.\r\n */\r\nexport default function createServer(\r\n  options: InitOptions,\r\n): YogaNodeServerInstance<\r\n  {\r\n    req: Request;\r\n    res: Response;\r\n  },\r\n  Record<string, any>,\r\n  void\r\n> {\r\n  const { schema, context } = init(options);\r\n  return createYogaServer({\r\n    plugins: [\r\n      /* eslint-disable react-hooks/rules-of-hooks */\r\n      useEnvelop(envelopWithSchema({ schema, context })),\r\n      /* eslint-enable react-hooks/rules-of-hooks */\r\n    ],\r\n  });\r\n}\r\n"],"names":[],"version":3,"file":"main.js.map"}
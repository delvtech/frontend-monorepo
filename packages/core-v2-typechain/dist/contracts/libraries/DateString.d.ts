import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";
export interface DateStringInterface extends utils.Interface {
    functions: {
        "OFFSET19700101()": FunctionFragment;
        "SECONDS_PER_DAY()": FunctionFragment;
        "SECONDS_PER_HOUR()": FunctionFragment;
        "SECONDS_PER_MINUTE()": FunctionFragment;
        "encodeAndWriteTimestamp(string,uint256)": FunctionFragment;
        "timestampToDateString(uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "OFFSET19700101" | "OFFSET19700101()" | "SECONDS_PER_DAY" | "SECONDS_PER_DAY()" | "SECONDS_PER_HOUR" | "SECONDS_PER_HOUR()" | "SECONDS_PER_MINUTE" | "SECONDS_PER_MINUTE()" | "encodeAndWriteTimestamp" | "encodeAndWriteTimestamp(string,uint256)" | "timestampToDateString" | "timestampToDateString(uint256)"): FunctionFragment;
    encodeFunctionData(functionFragment: "OFFSET19700101", values?: undefined): string;
    encodeFunctionData(functionFragment: "OFFSET19700101()", values?: undefined): string;
    encodeFunctionData(functionFragment: "SECONDS_PER_DAY", values?: undefined): string;
    encodeFunctionData(functionFragment: "SECONDS_PER_DAY()", values?: undefined): string;
    encodeFunctionData(functionFragment: "SECONDS_PER_HOUR", values?: undefined): string;
    encodeFunctionData(functionFragment: "SECONDS_PER_HOUR()", values?: undefined): string;
    encodeFunctionData(functionFragment: "SECONDS_PER_MINUTE", values?: undefined): string;
    encodeFunctionData(functionFragment: "SECONDS_PER_MINUTE()", values?: undefined): string;
    encodeFunctionData(functionFragment: "encodeAndWriteTimestamp", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "encodeAndWriteTimestamp(string,uint256)", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "timestampToDateString", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "timestampToDateString(uint256)", values: [PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "OFFSET19700101", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "OFFSET19700101()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "SECONDS_PER_DAY", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "SECONDS_PER_DAY()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "SECONDS_PER_HOUR", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "SECONDS_PER_HOUR()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "SECONDS_PER_MINUTE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "SECONDS_PER_MINUTE()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "encodeAndWriteTimestamp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "encodeAndWriteTimestamp(string,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "timestampToDateString", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "timestampToDateString(uint256)", data: BytesLike): Result;
    events: {};
}
export interface DateString extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DateStringInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        OFFSET19700101(overrides?: CallOverrides): Promise<[BigNumber]>;
        "OFFSET19700101()"(overrides?: CallOverrides): Promise<[BigNumber]>;
        SECONDS_PER_DAY(overrides?: CallOverrides): Promise<[BigNumber]>;
        "SECONDS_PER_DAY()"(overrides?: CallOverrides): Promise<[BigNumber]>;
        SECONDS_PER_HOUR(overrides?: CallOverrides): Promise<[BigNumber]>;
        "SECONDS_PER_HOUR()"(overrides?: CallOverrides): Promise<[BigNumber]>;
        SECONDS_PER_MINUTE(overrides?: CallOverrides): Promise<[BigNumber]>;
        "SECONDS_PER_MINUTE()"(overrides?: CallOverrides): Promise<[BigNumber]>;
        encodeAndWriteTimestamp(_prefix: PromiseOrValue<string>, _timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        "encodeAndWriteTimestamp(string,uint256)"(_prefix: PromiseOrValue<string>, _timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        timestampToDateString(_timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        "timestampToDateString(uint256)"(_timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
    };
    OFFSET19700101(overrides?: CallOverrides): Promise<BigNumber>;
    "OFFSET19700101()"(overrides?: CallOverrides): Promise<BigNumber>;
    SECONDS_PER_DAY(overrides?: CallOverrides): Promise<BigNumber>;
    "SECONDS_PER_DAY()"(overrides?: CallOverrides): Promise<BigNumber>;
    SECONDS_PER_HOUR(overrides?: CallOverrides): Promise<BigNumber>;
    "SECONDS_PER_HOUR()"(overrides?: CallOverrides): Promise<BigNumber>;
    SECONDS_PER_MINUTE(overrides?: CallOverrides): Promise<BigNumber>;
    "SECONDS_PER_MINUTE()"(overrides?: CallOverrides): Promise<BigNumber>;
    encodeAndWriteTimestamp(_prefix: PromiseOrValue<string>, _timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    "encodeAndWriteTimestamp(string,uint256)"(_prefix: PromiseOrValue<string>, _timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    timestampToDateString(_timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    "timestampToDateString(uint256)"(_timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        OFFSET19700101(overrides?: CallOverrides): Promise<BigNumber>;
        "OFFSET19700101()"(overrides?: CallOverrides): Promise<BigNumber>;
        SECONDS_PER_DAY(overrides?: CallOverrides): Promise<BigNumber>;
        "SECONDS_PER_DAY()"(overrides?: CallOverrides): Promise<BigNumber>;
        SECONDS_PER_HOUR(overrides?: CallOverrides): Promise<BigNumber>;
        "SECONDS_PER_HOUR()"(overrides?: CallOverrides): Promise<BigNumber>;
        SECONDS_PER_MINUTE(overrides?: CallOverrides): Promise<BigNumber>;
        "SECONDS_PER_MINUTE()"(overrides?: CallOverrides): Promise<BigNumber>;
        encodeAndWriteTimestamp(_prefix: PromiseOrValue<string>, _timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        "encodeAndWriteTimestamp(string,uint256)"(_prefix: PromiseOrValue<string>, _timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        timestampToDateString(_timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        "timestampToDateString(uint256)"(_timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        OFFSET19700101(overrides?: CallOverrides): Promise<BigNumber>;
        "OFFSET19700101()"(overrides?: CallOverrides): Promise<BigNumber>;
        SECONDS_PER_DAY(overrides?: CallOverrides): Promise<BigNumber>;
        "SECONDS_PER_DAY()"(overrides?: CallOverrides): Promise<BigNumber>;
        SECONDS_PER_HOUR(overrides?: CallOverrides): Promise<BigNumber>;
        "SECONDS_PER_HOUR()"(overrides?: CallOverrides): Promise<BigNumber>;
        SECONDS_PER_MINUTE(overrides?: CallOverrides): Promise<BigNumber>;
        "SECONDS_PER_MINUTE()"(overrides?: CallOverrides): Promise<BigNumber>;
        encodeAndWriteTimestamp(_prefix: PromiseOrValue<string>, _timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        "encodeAndWriteTimestamp(string,uint256)"(_prefix: PromiseOrValue<string>, _timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        timestampToDateString(_timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        "timestampToDateString(uint256)"(_timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        OFFSET19700101(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "OFFSET19700101()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        SECONDS_PER_DAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "SECONDS_PER_DAY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        SECONDS_PER_HOUR(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "SECONDS_PER_HOUR()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        SECONDS_PER_MINUTE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "SECONDS_PER_MINUTE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        encodeAndWriteTimestamp(_prefix: PromiseOrValue<string>, _timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "encodeAndWriteTimestamp(string,uint256)"(_prefix: PromiseOrValue<string>, _timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        timestampToDateString(_timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "timestampToDateString(uint256)"(_timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

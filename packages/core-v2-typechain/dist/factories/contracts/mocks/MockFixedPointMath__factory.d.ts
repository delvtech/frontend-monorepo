import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { MockFixedPointMath, MockFixedPointMathInterface } from "../../../contracts/mocks/MockFixedPointMath";
declare type MockFixedPointMathConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MockFixedPointMath__factory extends ContractFactory {
    constructor(...args: MockFixedPointMathConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<MockFixedPointMath>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): MockFixedPointMath;
    connect(signer: Signer): MockFixedPointMath__factory;
    static readonly bytecode = "0x6080806040523461001657610738908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c80632e4c697f14610077578063771602f71461006e5780638e6f235314610065578063b67d77c51461005c5763e46751e31461005457600080fd5b61000e61021c565b5061000e610184565b5061000e61015f565b5061000e6100b3565b3461000e57604060031936011261000e5760206100ab670de0b6b3a76400006100a16004356104a7565b6024350205610323565b604051908152f35b503461000e57604060031936011261000e5760043560243580198211610140575b81019081106100e857602090604051908152f35b7f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260076024527f454c46233030300000000000000000000000000000000000000000000000000060445260646000fd5b610148610235565b6100d4565b600319602091011261000e5760043590565b503461000e5760206100ab6101733661014d565b61017f60008213610265565b6104a7565b503461000e57604060031936011261000e576024356004358082116101c4578160209282106101b7575b60405191038152f35b6101bf610235565b6101ae565b7f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260076024527f454c46233030310000000000000000000000000000000000000000000000000060445260646000fd5b503461000e5760206100ab6102303661014d565b610323565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b1561026c57565b7f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260076024527f454c46233030360000000000000000000000000000000000000000000000000060445260646000fd5b156102cb57565b7f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260076024527f454c46233030390000000000000000000000000000000000000000000000000060445260646000fd5b7ffffffffffffffffffffffffffffffffffffffffffffffffdb731c958f34d94c18113156104a15780610367680755bf798b4a1bf1e56503782dace9d993126102c4565b604e1b0574029d9dc38563c32e5c2f6dc192ee70ef65f9978af36bb17217f7d1cf79abc9e3b3989179d835ebba824c98fb31b83b2ca45c0000000000000000000000006060916b8000000000000000000000008582851b0501831d94850290036d624dcbeb5e25df590e409325888a6dcf3c27b2e487711b467e90f19320826c09791803c2923d5d9721c3da80810102851d6d29c9ad45cc0beb0a2ff097a7bab46d019dd9374d4315c8464a395fc09882017fffffffffffffffffffffffffffffffffffffffe400ce74ed9455bc9156515002860102871d6d2c06887d92262d378b9593af3534810192010102851d0193826d13aaae3ba38de06adc25ebfacc09816d022f98fbc368092c79210d196fa0816c22fcd1cffa6fa000f6e27eeca0810102851d0102831d0102901d01020105029060c3031c90565b50600090565b6104b46000821215610265565b61051f81806fffffffffffffffffffffffffffffffff1060071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff1060031b1781811c600f1060021b1781811c60031060011b1790811c6001101790565b906060908183609f03011b609f1c917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0017d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b302918080808080806c465772b2bbbb5f824b15207a30810102871d6d0388eaa27412d5aca026815d636e0102861d6d0df99ac502031bf953eff472fdcc0102851d6d13cdffb29d51d99322bdff5f22110102841d6d0a0f742023def783a307a986912e0102831d6d01920d8043ca89b5239253284e420102821d6c0b7a86d7375468fac667a0a527019181808080806c29508e458543d8aa4df2abee78810102851d6d0139601a2efabe717e604cbb48940102841d6d02247f7a7b6594320649aa03aba10102831d7fffffffffffffffffffffffffffffffffffffff73c0c716a594e00d54e3c4cbc90102821d7ffffffffffffffffffffffffffffffffffffffdc7b88c420e53a9890533129f6f0102901d7fffffffffffffffffffffffffffffffffffffff465fda27eb4d63ded474e5f83201027ffffffffffffffff5f6af8f7b3396644f18e157960000000000000000000000000105711340daa0d5f769dba1915cef59f0815a550602017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d9056fea2646970667358221220501b629b5cca420e9ddade866d7a898bb6a7e975406f77b4f0a281698e6b1cfa64736f6c634300080f0033";
    static readonly abi: {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
    }[];
    static createInterface(): MockFixedPointMathInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MockFixedPointMath;
}
export {};

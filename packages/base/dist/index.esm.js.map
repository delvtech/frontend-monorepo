{"mappings":"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","sources":["packages/base/src/index.ts","packages/base/src/constants/emptyArray.ts","packages/base/src/debug/useConsole.ts","packages/base/src/ethereum/ethereum.ts","packages/base/src/localstorage/useLocalStorage.ts","packages/base/src/math/fixedPoint.ts","packages/base/src/merkle/merkle.ts","packages/base/src/money/convertToFiatBalance.ts","packages/base/src/money/formatMoney.ts","packages/base/src/prefs/hooks/usePref/usePref.ts","packages/base/src/prefs/prefEnvelope.ts","packages/base/src/queries/queryResults.ts","packages/base/src/time/dates.ts","packages/base/src/time/time.ts","packages/base/src/time/convertEpochSecondsToDate/convertEpochSecondsToDate.ts","packages/base/src/utils/assertNever.ts","packages/base/src/utils/typeAssertNever.ts","packages/base/src/utils/formatBalance/formatBalance.ts","packages/base/src/utils/formatPercent/formatPercent.ts","packages/base/src/utils/sortAddresses/sortAddresses.ts","packages/base/src/utils/validateAddresses/validateAddresses.ts"],"sourcesContent":["/*\n * This is the entry point for parcel to build this package.  See the \"source\"\n * property in package.json\n *\n * This \"barrel file\" is where we re-export anything we want to expose to\n * consumers of this package.\n */\n\nexport * from \"src/constants/emptyArray\";\nexport * from \"src/debug/useConsole\";\nexport * from \"src/ethereum/ethereum\";\nexport * from \"src/localstorage/useLocalStorage\";\nexport * from \"src/math/fixedPoint\";\nexport * from \"src/merkle/merkle\";\nexport * from \"src/money/convertToFiatBalance\";\nexport * from \"src/money/formatMoney\";\nexport * from \"src/prefs/hooks/usePref/usePref\";\nexport * from \"src/prefs/prefEnvelope\";\nexport * from \"src/queries/queryResults\";\nexport * from \"src/time/dates\";\nexport * from \"src/time/time\";\nexport * from \"src/time/convertEpochSecondsToDate/convertEpochSecondsToDate\";\nexport * from \"src/utils/assertNever\";\nexport * from \"src/utils/typeAssertNever\";\nexport * from \"src/utils/formatBalance/formatBalance\";\nexport * from \"src/utils/formatPercent/formatPercent\";\nexport * from \"src/utils/sortAddresses/sortAddresses\";\nexport * from \"src/utils/validateAddresses/validateAddresses\";\n","export const EMPTY_ARRAY: unknown[] = [];\n","import { useEffect } from \"react\";\nimport { usePrevious } from \"react-use\";\n\nimport isEqual from \"lodash.isequal\";\n\n/**\n * Hook to only console.log when the inputs to console.log change.\n * @param consoleArgs arguments to console.log\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function useConsole(...consoleArgs: any): void {\n  const previousArgs = usePrevious(consoleArgs);\n  const changed = isEqual(previousArgs, consoleArgs);\n  useEffect(() => {\n    // eslint-disable-next-line no-console\n    console.log(...consoleArgs);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [changed]);\n}\n","import { parseUnits } from \"ethers/lib/utils\";\n\n/*\n * See https://chainid.network/\n */\nexport enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  LOCAL = 31337,\n}\n\nexport const ETHEREUM_BLOCK_PER_DAY = 5760;\nexport const ETHEREUM_BLOCKS_PER_WEEK = ETHEREUM_BLOCK_PER_DAY * 7;\n\nexport const ChainNames: Record<ChainId, string> = {\n  [ChainId.MAINNET]: \"Ethereum Mainnet\",\n  [ChainId.GOERLI]: \"Goerli Testnet\",\n  [ChainId.LOCAL]: \"Local development\",\n};\n\nexport const DEFAULT_CHAIN_IDS: ChainId[] = [\n  ChainId.MAINNET,\n  ChainId.GOERLI,\n  ChainId.LOCAL,\n];\n\nexport function isLocalnet(chainId: number): boolean {\n  return chainId === ChainId.LOCAL;\n}\nexport function isGoerli(chainId: number): boolean {\n  return chainId === ChainId.GOERLI;\n}\nexport function isMainnet(chainId: number): boolean {\n  return (\n    chainId === ChainId.MAINNET ||\n    (chainId === ChainId.LOCAL &&\n      process.env.NEXT_PUBLIC_CHAIN_NAME === \"mainnet_fork\")\n  );\n}\nexport const NUM_ETH_DECIMALS = 18;\nexport const ONE_ETHER = parseUnits(\"1\", NUM_ETH_DECIMALS);\n\nexport const ETH_ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n","export type LocalStorage = {\n  getItem: (key: string) => string;\n  setItem: (key: string, value: string) => boolean;\n  clear: () => void;\n};\n\n// TODO: Move to component-library\nexport function useLocalStorage(): LocalStorage {\n  const isBrowser: boolean = typeof window !== \"undefined\";\n\n  const getItem = (key: string): string => {\n    return isBrowser ? window.localStorage[key] : \"\";\n  };\n\n  const setItem = (key: string, value: string): boolean => {\n    if (isBrowser) {\n      window.localStorage.setItem(key, value);\n      return true;\n    }\n\n    return false;\n  };\n\n  const clear = (): void => {\n    window.localStorage.clear();\n  };\n\n  return {\n    getItem,\n    setItem,\n    clear,\n  };\n}\n","import { FixedNumber } from \"ethers\";\n\nconst NUM_ETH_DECIMALS = 18;\n\nexport interface FixedFormat {\n  /**\n   * number of decimals to use for fixed point math\n   */\n  decimals: number;\n\n  /**\n   * if the number is signed or unsigned\n   */\n  signed: boolean;\n\n  /**\n   * width in bits, must be power of 8. i.e. 8, 16, ..., 256.  Max is 256\n   */\n  width: number;\n\n  /**\n   * name of this format\n   */\n  name: string;\n\n  /**\n   * multiplier added to this number\n   */\n  _multiplier: string;\n}\nexport interface FixedFormatOptions {\n  decimals?: number;\n  signed?: boolean;\n  width?: number;\n  name?: string;\n  _multiplier?: string;\n}\n\nconst defaultFormat: FixedFormat = {\n  decimals: NUM_ETH_DECIMALS,\n  signed: false,\n  width: 256,\n  name: \"18POINT\",\n  _multiplier: \"1\",\n};\nexport function getSafeFixedNumber(\n  value: string,\n  formatOptions?: FixedFormatOptions,\n): FixedNumber {\n  const format: FixedFormat = {\n    ...defaultFormat,\n    ...formatOptions,\n  };\n  const { decimals } = format;\n\n  // ok to cast because defaultFormat will always return a value\n  const safeValue = clipStringValueToDecimals(value, decimals);\n  return FixedNumber.from(safeValue, format);\n}\n\nexport function clipFixNumberToStringDecimals(\n  value: FixedNumber,\n  decimals: number,\n): string {\n  const unsafeString = value.toString();\n  const safeValue = clipStringValueToDecimals(unsafeString, decimals);\n  return safeValue;\n}\n\nexport function clipStringValueToDecimals(\n  value: string | undefined,\n  maxDecimals: number,\n): string {\n  if (value === undefined) {\n    return \"\";\n  }\n\n  if (value === \".\") {\n    return \"0.\";\n  }\n\n  if (getPlacesAfterDecimal(value) <= maxDecimals) {\n    return value;\n  }\n\n  const [integerPart, decimalPart] = value.split(\".\");\n  const clippedDecimals = decimalPart.slice(0, maxDecimals);\n\n  return `${integerPart || 0}.${clippedDecimals}`;\n}\n\n/**\n * Helper function to get the number of digits after the decimal.  Assumes a properly formatted\n * number with only numeric characters and 0 or 1 decimals\n *\n * @param stringValue a numeric string with or without a decimal i.e. 3.14 or 42.\n */\nexport function getPlacesAfterDecimal(stringValue: string | undefined): number {\n  if (stringValue === undefined) {\n    return 0;\n  }\n\n  const hasDecimal = stringValue.indexOf(\".\") !== -1;\n\n  if (hasDecimal) {\n    return stringValue.split(\".\")[1].length ?? 0;\n  }\n\n  return 0;\n}\n","import { MerkleTree } from \"merkletreejs\";\nimport { BigNumberish, ethers } from \"ethers\";\n\nexport interface Account {\n  address: string;\n  value: BigNumberish;\n}\n\nexport function getMerkleTree(accounts: Account[]): MerkleTree {\n  const leaves = accounts.map((account) => hashAccount(account));\n  return new MerkleTree(leaves, keccak256Custom, {\n    hashLeaves: false,\n    sortPairs: true,\n  });\n}\n\nexport function hashAccount(account: Account): string {\n  return ethers.utils.solidityKeccak256(\n    [\"address\", \"uint256\"],\n    [account.address, account.value],\n  );\n}\n\n// Horrible hack because the keccak256 package as used by openzepplin in tests is failing on our\n// system somehow\nfunction keccak256Custom(bytes: Buffer) {\n  const buffHash = ethers.utils.solidityKeccak256(\n    [\"bytes\"],\n    [`0x${bytes.toString(\"hex\")}`],\n  );\n  return Buffer.from(buffHash.slice(2), \"hex\");\n}\n\n// Examples:\n//\n// const proof = merkleTree.getHexProof(\n//   await hashAccount({\n//     address: signers[0].address,\n//     value: FIFTY_ETHER,\n//   })\n// );\n\n// const extraData = ethers.utils.defaultAbiCoder.encode(\n//   [\"uint256\", \"bytes32[]\"],\n//   [FIFTY_ETHER, proof]\n// );\n","import { BigNumber } from \"ethers\";\nimport { formatUnits } from \"ethers/lib/utils\";\nimport { Money } from \"ts-money\";\n\n/**\n * Helper function to get the fiat value for a cryptocurrency.  The conversion can easily throw\n * errors if BigNumber and Moneya are used incorrectly.\n *\n * @param {number} fiatValue the value of the crypto in the fiat, i.e. 400.01\n * @param {string} fiatCode  the ISO 4217 currency country code, i.e. 'USD'\n * @param {BigNumber} cryptoFractionalValue the fractional unit value, i.e. 10000000000000000000\n * (wei)\n * @param {number} cryptoDecimals the number of decimals to convert the fractional unit value to\n */\nexport function convertToFiatBalance(\n  fiatValue: Money,\n  cryptoFractionalValue: BigNumber,\n  cryptoDecimals: number,\n): Money {\n  // formatUnits will always create a string that can be converted to a number without overflow problems\n  const cryptoBalance = Number(\n    formatUnits(cryptoFractionalValue, cryptoDecimals),\n  );\n\n  // Now we can safely multiply the crypto price by the balance to get the fiat balance\n  return fiatValue.multiply(cryptoBalance, Math.round);\n}\n\nexport function convertNumberToFiatBalance(\n  fiatValue: Money,\n  cryptoNominalValue: number,\n): Money {\n  // Now we can safely multiply the crypto price by the balance to get the fiat balance\n  return fiatValue.multiply(cryptoNominalValue, Math.round);\n}\n","import { Money } from \"ts-money\";\n\ninterface FormatMoneyOptions {\n  defaultMoney?: Money;\n  wholeAmounts?: boolean;\n}\n\nconst defaultOptions: FormatMoneyOptions = {\n  defaultMoney: undefined,\n  wholeAmounts: false,\n};\n\n/**\n * Helper to convert a Money object to a human readable string\n * ex: $1.23\n * @param {Money} money value to be formatted\n */\n\nexport function formatMoney(\n  money: Money | undefined,\n  options = defaultOptions,\n): string | undefined {\n  const { defaultMoney, wholeAmounts } = options;\n\n  if (!money && !defaultMoney) {\n    return undefined;\n  }\n\n  // we know at least one is defined by the check above, safe to cast\n  const value = money ?? (defaultMoney as Money);\n\n  const fractionDigits = wholeAmounts\n    ? 0\n    : value.getCurrencyInfo().decimal_digits;\n\n  // This is how you express `(10000).toFixed(precision).toLocaleString()` such\n  // that you get commmas inserted where they belong and the correct number of\n  // digits after the decimal point.\n  const formatted = value.toDecimal().toLocaleString(undefined, {\n    minimumFractionDigits: fractionDigits,\n    maximumFractionDigits: fractionDigits,\n  });\n\n  const currencyInfo = value.getCurrencyInfo();\n\n  return `${currencyInfo.symbol}${formatted}`;\n}\n","import { PrefEnvelope, makePrefEnvelope } from \"src/prefs/prefEnvelope\";\nimport {\n  LocalStorage,\n  useLocalStorage,\n} from \"src/localstorage/useLocalStorage\";\nimport { useCallback, useMemo } from \"react\";\nimport { useQuery, useQueryClient } from \"react-query\";\n\ninterface PrefResult<T> {\n  pref: T;\n  setPref: (newPref: T) => void;\n}\n\n// TODO: Move to component-library\nexport function usePref<T>(id: string, defaultValue: T): PrefResult<T> {\n  const efiLocalStorage = useLocalStorage();\n  const getPrefFromLocalStorage = useGetPrefFromLocalStorage(efiLocalStorage);\n  const queryClient = useQueryClient();\n  const queryKey = usePrefQueryKey(id);\n\n  const { data: prefEnvelope } = useQuery<PrefEnvelope<T>>({\n    queryKey,\n    queryFn: () => {\n      return getPrefFromLocalStorage(id) ?? makePrefEnvelope(defaultValue);\n    },\n    initialData: () =>\n      getPrefFromLocalStorage<T>(id) ?? makePrefEnvelope(defaultValue),\n  });\n\n  const setPref = useCallback(\n    (newPref: T) => {\n      // Use an envelope because JSON.stringify likes serializable objects and\n      // prefs could be anything\n      const prefEnvelope = makePrefEnvelope(newPref);\n      efiLocalStorage.setItem(id, JSON.stringify(prefEnvelope));\n\n      // Invalidate this pref so callers will re-ensure the data as needed\n      queryClient.invalidateQueries(queryKey);\n    },\n    [id, queryClient, queryKey, efiLocalStorage],\n  );\n\n  return {\n    pref: (prefEnvelope as PrefEnvelope<T>).pref, // safe to cast because initialData is set in useQuery\n    setPref,\n  };\n}\n\nfunction usePrefQueryKey(id: string) {\n  const queryKey = useMemo(() => [[\"efi\", \"prefs\"], { id }], [id]);\n  return queryKey;\n}\n\nfunction useGetPrefFromLocalStorage(efiLocalStorage: LocalStorage) {\n  return useCallback(\n    function <T>(id: string): PrefEnvelope<T> | undefined {\n      const prefString = efiLocalStorage.getItem(id);\n      if (!prefString) {\n        return;\n      }\n\n      const prefEnvelope: PrefEnvelope<T> = JSON.parse(prefString);\n      return prefEnvelope;\n    },\n    [efiLocalStorage],\n  );\n}\n","export interface PrefEnvelope<T> {\n  pref: T;\n  version: string;\n}\n\nconst PREF_ENVELOPE_VERSION = \"1.0.0\";\n\n/**\n * Use an envelope because JSON.stringify likes serializable objects and prefs\n * could be any data type.\n *\n * NOTE: Changing the shape of the PrefEnvelope might require a migration for\n * users who have persisted values.\n */\nexport function makePrefEnvelope<T>(pref: T): PrefEnvelope<T> {\n  return { pref, version: PREF_ENVELOPE_VERSION };\n}\n","import { QueryObserverResult } from \"react-query\";\n\nexport function getQueryData<T>(\n  queryResult: QueryObserverResult<T>,\n): T | undefined {\n  return queryResult.data;\n}\n\nexport function getQueriesData<T>(\n  queryResults: QueryObserverResult<T>[],\n): (T | undefined)[] {\n  return queryResults.map((result) => getQueryData(result));\n}\n","import { timeFormat } from \"d3-time-format\";\n\n/**\n * Formats a Date object, eg: \"27\"\n */\nexport const formatDay = timeFormat(\"%d\");\n/**\n * Formats a Date object, eg: \"January 30, 2021\"\n */\nexport const formatFullDate = timeFormat(\"%B %d, %Y\");\n\n/**\n * Formats a Date object, eg: \"Jan 30, 2021\"\n */\nexport const formatAbbreviatedDate = timeFormat(\"%b %d, %Y\");\n\n/**\n * Formats a Date object, eg: \"Jan 30\"\n */\nexport const formatAbbreviatedMonthAndDay = timeFormat(\"%b %d\");\n\n/**\n * Formats a Date object, eg: \"2021\"\n */\nexport const formatYear = timeFormat(\"%Y\");\n","export const ONE_MINUTE_IN_SECONDS = 60;\nexport const ONE_HOUR_IN_SECONDS = 60 * ONE_MINUTE_IN_SECONDS;\nexport const ONE_DAY_IN_SECONDS = 24 * ONE_HOUR_IN_SECONDS;\nexport const ONE_WEEK_IN_SECONDS = 7 * ONE_DAY_IN_SECONDS;\nexport const THIRTY_DAYS_IN_SECONDS = 30 * ONE_DAY_IN_SECONDS;\nexport const ONE_YEAR_IN_SECONDS = 365 * ONE_DAY_IN_SECONDS;\n\nexport const ONE_MINUTE_IN_MILLISECONDS = 1000 * ONE_MINUTE_IN_SECONDS;\nexport const ONE_HOUR_IN_MILLISECONDS = 60 * ONE_MINUTE_IN_MILLISECONDS;\nexport const TWELVE_HOUR_IN_MILLISECONDS = 12 * ONE_HOUR_IN_MILLISECONDS;\nexport const ONE_DAY_IN_MILLISECONDS = 24 * ONE_HOUR_IN_MILLISECONDS;\nexport const ONE_WEEK_IN_MILLISECONDS = 7 * ONE_DAY_IN_MILLISECONDS;\nexport const ONE_YEAR_IN_MILLISECONDS = 365 * ONE_DAY_IN_MILLISECONDS;\nexport const THIRTY_DAYS_IN_MILLISECONDS = 30 * ONE_DAY_IN_MILLISECONDS;\n","export function convertEpochSecondsToDate(seconds: number): Date {\n  const epochMilliseconds = seconds * 1000;\n  return new Date(epochMilliseconds);\n}\n","export function assertNever(never: never): void {\n  throw new Error(`Was not never: ${never}`);\n}\n","/**\n * Performs a type check to make sure that a code path is unreachacle.  This is useful for example\n * in exhaustive type checking in switch statements:\n *\n * enum Foo {\n *   Bar = 'Bar',\n *   Baz = 'Baz',\n * }\n *\n * const foo = Foo.Bar;\n * switch (foo) {\n *   case Foo.Bar:\n *     // some logic here\n *     break;\n *   default:\n *     typeAssertNever(foo); // throws an error because case Foo.Baz is not covered!\n * }\n *\n * This function differs from assertNever in that it won't actually throw an error if the code is reached.\n * @param checkNever variable that should be equal to never by the time this function is reached.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function typeAassertNever(checkNever: never): void {}\n","import { BigNumber } from \"ethers\";\nimport { commify, formatUnits } from \"ethers/lib/utils\";\n\nimport { clipStringValueToDecimals } from \"src/math/fixedPoint\";\n\ninterface FormatBalanceOptions {\n  /**\n   * Whether or not to include commas when formatting, default is true.\n   * Example: \"1,000,000\"\n   */\n  formatCommas: boolean;\n}\nconst defaultOptions: FormatBalanceOptions = { formatCommas: true };\n\n/**\n * @deprecated BigNumber balance is deprecated, use formatBalance2 instead that just uses strings\n */\nexport function formatBalance(\n  balance: BigNumber | undefined,\n  decimals: number | undefined,\n  maxPrecision = 4,\n  options = defaultOptions,\n): string {\n  if (!balance || !decimals) {\n    return \"0.0000\";\n  }\n\n  const stringBalance = formatUnits(balance, decimals);\n  const clipped = clipStringValueToDecimals(stringBalance, maxPrecision);\n  const { formatCommas } = options;\n  if (formatCommas) {\n    return commify(clipped);\n  }\n  return clipped;\n}\n\nexport function formatBalance2(\n  balance: string | undefined,\n  decimals: number | undefined,\n  maxPrecision = 4,\n  options = defaultOptions,\n): string {\n  if (!balance || !decimals) {\n    return \"0\";\n  }\n\n  const clipped = clipStringValueToDecimals(balance, maxPrecision);\n  const { formatCommas } = options;\n  if (formatCommas) {\n    return commify(clipped);\n  }\n  return clipped;\n}\n","export function formatPercent(decimalAmount: number, precision = 2): string {\n  const percent = (decimalAmount * 100).toFixed(precision);\n  return `${percent}%`;\n}\n","export function sortAddresses(addresses: string[]): string[] {\n  const lowerCaseAddresses = addresses.map((address) => address.toLowerCase());\n\n  // map of lower case addresses to mixed case addresses\n  const addressMap: Record<string, string> = {};\n  lowerCaseAddresses.forEach((lowerCaseAddress, index) => {\n    addressMap[lowerCaseAddress] = addresses[index];\n  });\n\n  const sortedLowerCaseAddresses = lowerCaseAddresses.map((a) => a).sort();\n  const sortedAddresses = sortedLowerCaseAddresses.map(\n    (lowerCaseAddress) => addressMap[lowerCaseAddress],\n  );\n\n  return sortedAddresses;\n}\n","import { utils } from \"ethers\";\n\nexport function validateAddresses(addresses: string[]): void | never {\n  addresses.forEach((address) => {\n    const isAddress = utils.isAddress(address);\n    if (!isAddress) {\n      throw new Error(`Invalid parameter ${address} is not a valid address!`);\n    }\n  });\n}\n"],"names":[],"version":3,"file":"index.esm.js.map"}
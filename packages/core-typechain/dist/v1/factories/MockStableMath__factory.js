"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockStableMath__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amp",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amountsOut",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapFee",
        type: "uint256",
      },
    ],
    name: "bptInForExactTokensOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amp",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "lastInvariant",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "protocolSwapFeePercentage",
        type: "uint256",
      },
    ],
    name: "calculateDueTokenProtocolSwapFeeAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amp",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "tokenIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptAmountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapFee",
        type: "uint256",
      },
    ],
    name: "exactBPTInForTokenOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "bptAmountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
    ],
    name: "exactBPTInForTokensOut",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amp",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amountsIn",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapFee",
        type: "uint256",
      },
    ],
    name: "exactTokensInForBPTOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amp",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "tokenIndexIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenIndexOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenAmountOut",
        type: "uint256",
      },
    ],
    name: "inGivenOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amp",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
    ],
    name: "invariant",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amp",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "tokenIndexIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenIndexOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenAmountIn",
        type: "uint256",
      },
    ],
    name: "outGivenIn",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amp",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "tokenIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptAmountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapFee",
        type: "uint256",
      },
    ],
    name: "tokenInForExactBPTOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];
const _bytecode =
  "0x608060405234801561001057600080fd5b50611f55806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80639cd91d3f116100665780639cd91d3f1461050b578063a89d4259146105ff578063cf1b8c8c1461077d578063db7ad3f21461087b578063fe2dd7ba1461096f57610093565b8063155bfcb8146100985780631c855fa61461016e578063405de9781461028f5780636fc82f291461038d575b600080fd5b610158600480360360408110156100ae57600080fd5b8101908080359060200190929190803590602001906401000000008111156100d557600080fd5b8201836020820111156100e757600080fd5b8035906020019184602083028401116401000000008311171561010957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610a63565b6040518082815260200191505060405180910390f35b6102386004803603606081101561018457600080fd5b81019080803590602001906401000000008111156101a157600080fd5b8201836020820111156101b357600080fd5b803590602001918460208302840111640100000000831117156101d557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190929190505050610a77565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561027b578082015181840152602081019050610260565b505050509050019250505060405180910390f35b610377600480360360c08110156102a557600080fd5b8101908080359060200190929190803590602001906401000000008111156102cc57600080fd5b8201836020820111156102de57600080fd5b8035906020019184602083028401116401000000008311171561030057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190803590602001909291908035906020019092919080359060200190929190505050610a8d565b6040518082815260200191505060405180910390f35b6104f5600480360360a08110156103a357600080fd5b8101908080359060200190929190803590602001906401000000008111156103ca57600080fd5b8201836020820111156103dc57600080fd5b803590602001918460208302840111640100000000831117156103fe57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561045e57600080fd5b82018360208201111561047057600080fd5b8035906020019184602083028401116401000000008311171561049257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190929190505050610aa9565b6040518082815260200191505060405180910390f35b6105e9600480360360a081101561052157600080fd5b81019080803590602001909291908035906020019064010000000081111561054857600080fd5b82018360208201111561055a57600080fd5b8035906020019184602083028401116401000000008311171561057c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291908035906020019092919080359060200190929190505050610ac3565b6040518082815260200191505060405180910390f35b610767600480360360a081101561061557600080fd5b81019080803590602001909291908035906020019064010000000081111561063c57600080fd5b82018360208201111561064e57600080fd5b8035906020019184602083028401116401000000008311171561067057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156106d057600080fd5b8201836020820111156106e257600080fd5b8035906020019184602083028401116401000000008311171561070457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190929190505050610add565b6040518082815260200191505060405180910390f35b610865600480360360c081101561079357600080fd5b8101908080359060200190929190803590602001906401000000008111156107ba57600080fd5b8201836020820111156107cc57600080fd5b803590602001918460208302840111640100000000831117156107ee57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190803590602001909291908035906020019092919080359060200190929190505050610af7565b6040518082815260200191505060405180910390f35b610959600480360360a081101561089157600080fd5b8101908080359060200190929190803590602001906401000000008111156108b857600080fd5b8201836020820111156108ca57600080fd5b803590602001918460208302840111640100000000831117156108ec57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291908035906020019092919080359060200190929190505050610b13565b6040518082815260200191505060405180910390f35b610a4d600480360360a081101561098557600080fd5b8101908080359060200190929190803590602001906401000000008111156109ac57600080fd5b8201836020820111156109be57600080fd5b803590602001918460208302840111640100000000831117156109e057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291908035906020019092919080359060200190929190505050610b2d565b6040518082815260200191505060405180910390f35b6000610a6f8383610b47565b905092915050565b6060610a84848484610d34565b90509392505050565b6000610a9d878787878787610dfd565b90509695505050505050565b6000610ab88686868686610f41565b905095945050505050565b6000610ad286868686866112b0565b905095945050505050565b6000610aec8686868686611391565b905095945050505050565b6000610b078787878787876116dc565b90509695505050505050565b6000610b228686868686611820565b905095945050505050565b6000610b3c86868686866118b7565b905095945050505050565b6000806000905060008351905060005b81811015610b9457610b85858281518110610b6e57fe5b60200260200101518461199890919063ffffffff16565b92508080600101915050610b57565b506000821415610ba957600092505050610d2e565b6000808390506000610bbb88856119b8565b905060005b60ff811015610d24576000610be9868a600081518110610bdc57fe5b60200260200101516119b8565b90506000600190505b86811015610c3857610c29610c23610c1d848d8581518110610c1057fe5b60200260200101516119b8565b896119b8565b866119eb565b91508080600101915050610bf2565b50839450610cc6610c76610c55610c4f868b6119b8565b846119b8565b610c68610c628a896119b8565b886119b8565b61199890919063ffffffff16565b610cc1610c96610c90600188611a2790919063ffffffff16565b856119b8565b610cb3610cad60018c61199890919063ffffffff16565b896119b8565b61199890919063ffffffff16565b6119eb565b935084841115610cf5576001610ce58686611a2790919063ffffffff16565b11610cf05750610d24565b610d16565b6001610d0a8587611a2790919063ffffffff16565b11610d155750610d24565b5b508080600101915050610bc0565b5081955050505050505b92915050565b60606000610d4b8385611a4890919063ffffffff16565b90506060855167ffffffffffffffff81118015610d6757600080fd5b50604051908082528060200260200182016040528015610d965781602001602082028036833780820191505090505b50905060005b8651811015610df057610dcb83888381518110610db557fe5b6020026020010151611aac90919063ffffffff16565b828281518110610dd757fe5b6020026020010181815250508080600101915050610d9c565b5080925050509392505050565b600080610e0a8888610b47565b90506000610e4582610e3787610e298a8a61199890919063ffffffff16565b611af090919063ffffffff16565b611b5a90919063ffffffff16565b90506000805b8951811015610e8957610e7a8a8281518110610e6357fe5b60200260200101518361199890919063ffffffff16565b91508080600101915050610e4b565b506000610e988b8b858c611bb8565b90506000610ec28b8b81518110610eab57fe5b602002602001015183611a2790919063ffffffff16565b90506000610eec848d8d81518110610ed657fe5b6020026020010151611a4890919063ffffffff16565b90506000610ef982611e4e565b90506000610f10828b611b5a90919063ffffffff16565b9050610f2d610f1e82611e4e565b85611af090919063ffffffff16565b985050505050505050509695505050505050565b600080610f4e8787610b47565b90506000805b8751811015610f9257610f83888281518110610f6c57fe5b60200260200101518361199890919063ffffffff16565b91508080600101915050610f54565b506060865167ffffffffffffffff81118015610fad57600080fd5b50604051908082528060200260200182016040528015610fdc5781602001602082028036833780820191505090505b5090506000805b89518110156110d4576000611014858c8481518110610ffe57fe5b6020026020010151611a4890919063ffffffff16565b90506110748b838151811061102557fe5b60200260200101516110668c858151811061103c57fe5b60200260200101518e868151811061105057fe5b602002602001015161199890919063ffffffff16565b611a4890919063ffffffff16565b84838151811061108057fe5b6020026020010181815250506110c46110b58286858151811061109f57fe5b6020026020010151611aac90919063ffffffff16565b8461199890919063ffffffff16565b9250508080600101915050610fe3565b506060895167ffffffffffffffff811180156110ef57600080fd5b5060405190808252806020026020018201604052801561111e5781602001602082028036833780820191505090505b50905060005b8a5181101561125157600084828151811061113b57fe5b6020026020010151841061115257600090506111ba565b6111b7611183670de0b6b3a764000087858151811061116d57fe5b6020026020010151611a2790919063ffffffff16565b6111a98688868151811061119357fe5b6020026020010151611a2790919063ffffffff16565b611af090919063ffffffff16565b90505b60006111cf828b611b5a90919063ffffffff16565b905060006112016111df83611e4e565b8e86815181106111eb57fe5b6020026020010151611aac90919063ffffffff16565b9050611229818f868151811061121357fe5b602002602001015161199890919063ffffffff16565b85858151811061123557fe5b6020026020010181815250505050508080600101915050611124565b50600061125e8c83610b47565b905061129f611290670de0b6b3a76400006112828985611a4890919063ffffffff16565b611a2790919063ffffffff16565b8a611aac90919063ffffffff16565b965050505050505095945050505050565b6000806112bd8787610b47565b90506112e5838786815181106112cf57fe5b6020026020010151611a2790919063ffffffff16565b8685815181106112f157fe5b602002602001018181525050600061130b88888489611bb8565b90506113338488878151811061131d57fe5b602002602001015161199890919063ffffffff16565b87868151811061133f57fe5b602002602001018181525050611384600161137689898151811061135f57fe5b602002602001015184611a2790919063ffffffff16565b61199890919063ffffffff16565b9250505095945050505050565b60008061139e8787610b47565b90506000805b87518110156113e2576113d38882815181106113bc57fe5b60200260200101518361199890919063ffffffff16565b915080806001019150506113a4565b506060865167ffffffffffffffff811180156113fd57600080fd5b5060405190808252806020026020018201604052801561142c5781602001602082028036833780820191505090505b5090506000805b8951811015611524576000611464858c848151811061144e57fe5b6020026020010151611af090919063ffffffff16565b90506114c48b838151811061147557fe5b60200260200101516114b68c858151811061148c57fe5b60200260200101518e86815181106114a057fe5b6020026020010151611a2790919063ffffffff16565b611af090919063ffffffff16565b8483815181106114d057fe5b602002602001018181525050611514611505828685815181106114ef57fe5b6020026020010151611b5a90919063ffffffff16565b8461199890919063ffffffff16565b9250508080600101915050611433565b506060895167ffffffffffffffff8111801561153f57600080fd5b5060405190808252806020026020018201604052801561156e5781602001602082028036833780820191505090505b50905060005b8a5181101561168f57600084828151811061158b57fe5b602002602001015184116115a257600090506115f8565b6115f56115c18684815181106115b457fe5b6020026020010151611e4e565b6115e78785815181106115d057fe5b602002602001015187611a2790919063ffffffff16565b611af090919063ffffffff16565b90505b600061160d828b611b5a90919063ffffffff16565b9050600061163f61161d83611e4e565b8e868151811061162957fe5b6020026020010151611af090919063ffffffff16565b9050611667818f868151811061165157fe5b6020026020010151611a2790919063ffffffff16565b85858151811061167357fe5b6020026020010181815250505050508080600101915050611574565b50600061169c8c83610b47565b90506116cb6116bc6116b78884611af090919063ffffffff16565b611e4e565b8a611b5a90919063ffffffff16565b965050505050505095945050505050565b6000806116e98888610b47565b9050600061172482611716876117088a8a611a2790919063ffffffff16565b611af090919063ffffffff16565b611b5a90919063ffffffff16565b90506000805b8951811015611768576117598a828151811061174257fe5b60200260200101518361199890919063ffffffff16565b9150808060010191505061172a565b5060006117778b8b858c611bb8565b905060006117a1828c8c8151811061178b57fe5b6020026020010151611a2790919063ffffffff16565b905060006117cb848d8d815181106117b557fe5b6020026020010151611a4890919063ffffffff16565b905060006117d882611e4e565b905060006117ef828b611b5a90919063ffffffff16565b905061180c6117fd82611e4e565b85611aac90919063ffffffff16565b985050505050505050509695505050505050565b60008061182f87878787611bb8565b905060008187868151811061184057fe5b60200260200101511161185457600061187b565b61187a8288878151811061186457fe5b6020026020010151611a2790919063ffffffff16565b5b90506118aa670de0b6b3a764000061189c8684611aac90919063ffffffff16565b611a4890919063ffffffff16565b9250505095945050505050565b6000806118c48787610b47565b90506118ec838787815181106118d657fe5b602002602001015161199890919063ffffffff16565b8686815181106118f857fe5b602002602001018181525050600061191288888488611bb8565b905061193a8488888151811061192457fe5b6020026020010151611a2790919063ffffffff16565b87878151811061194657fe5b60200260200101818152505061198b600161197d838a898151811061196757fe5b6020026020010151611a2790919063ffffffff16565b611a2790919063ffffffff16565b9250505095945050505050565b60008082840190506119ae848210156000611e79565b8091505092915050565b60008082840290506119e160008514806119da5750838583816119d757fe5b04145b6003611e79565b8091505092915050565b60006119fc60008314156004611e79565b6000831415611a0e5760009050611a21565b816001840381611a1a57fe5b0460010190505b92915050565b6000611a37838311156001611e79565b600082840390508091505092915050565b6000611a5960008314156004611e79565b6000831415611a6b5760009050611aa6565b6000670de0b6b3a764000084029050611a98670de0b6b3a7640000858381611a8f57fe5b04146005611e79565b828181611aa157fe5b049150505b92915050565b6000808284029050611ad56000851480611ace575083858381611acb57fe5b04145b6003611e79565b670de0b6b3a76400008181611ae657fe5b0491505092915050565b6000611b0160008314156004611e79565b6000831415611b135760009050611b54565b6000670de0b6b3a764000084029050611b40670de0b6b3a7640000858381611b3757fe5b04146005611e79565b6001836001830381611b4e57fe5b04019150505b92915050565b6000808284029050611b836000851480611b7c575083858381611b7957fe5b04145b6003611e79565b6000811415611b96576000915050611bb2565b6001670de0b6b3a76400006001830381611bac57fe5b04019150505b92915050565b600080611bc68686516119b8565b9050600085600081518110611bd757fe5b602002602001015190506000611c02875188600081518110611bf557fe5b60200260200101516119b8565b90506000600190505b8751811015611c7b57611c44611c3e611c37848b8581518110611c2a57fe5b60200260200101516119b8565b8a516119b8565b88611e8c565b9150611c6c888281518110611c5557fe5b60200260200101518461199890919063ffffffff16565b92508080600101915050611c0b565b50611ca2878681518110611c8b57fe5b602002602001015183611a2790919063ffffffff16565b91506000611cb9611cb388896119b8565b856119eb565b9050611cf382611ce58a8981518110611cce57fe5b602002602001015184611b5a90919063ffffffff16565b611af090919063ffffffff16565b90506000611d1c611d0d868a611a4890919063ffffffff16565b8561199890919063ffffffff16565b9050600080611d6a611d37848c61199890919063ffffffff16565b611d5c86611d4e8e8f611b5a90919063ffffffff16565b61199890919063ffffffff16565b611af090919063ffffffff16565b905060005b60ff811015611e3b57819250611de0611dad8c611d9f87611d918760026119b8565b61199890919063ffffffff16565b611a2790919063ffffffff16565b611dd287611dc48687611b5a90919063ffffffff16565b61199890919063ffffffff16565b611af090919063ffffffff16565b915082821115611e0e576001611dff8484611a2790919063ffffffff16565b11611e0957611e3b565b611e2e565b6001611e238385611a2790919063ffffffff16565b11611e2d57611e3b565b5b8080600101915050611d6f565b5080975050505050505050949350505050565b6000670de0b6b3a76400008210611e66576000611e72565b81670de0b6b3a7640000035b9050919050565b81611e8857611e8781611eaf565b5b5050565b6000611e9d60008314156004611e79565b818381611ea657fe5b04905092915050565b6030600a820601600a820491506030600a830601600a830492506030600a8406018060101b8260081b8401016642414c230000000160c81b7f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260076024528060445260646000fdfea2646970667358221220595335a6a980586c23331914b312b3a21880000ca993f6f961f9e43c054696a364736f6c63430007010033";
const isSuperArgs = (xs) => xs.length > 1;
class MockStableMath__factory extends ethers_1.ContractFactory {
  constructor(...args) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address) {
    return super.attach(address);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new ethers_1.utils.Interface(_abi);
  }
  static connect(address, signerOrProvider) {
    return new ethers_1.Contract(address, _abi, signerOrProvider);
  }
}
exports.MockStableMath__factory = MockStableMath__factory;
MockStableMath__factory.bytecode = _bytecode;
MockStableMath__factory.abi = _abi;

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Reverter, ReverterInterface } from "../Reverter";

const _abi = [
  {
    inputs: [],
    name: "fail",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50606b80601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063a9cc471814602d575b600080fd5b60336028565b00fea26469706673582212207dde1aaa311dcf0eb0200351ecd39ca261612edd47b2358dc42029a54ed9dc2964736f6c63430008030033";

export class Reverter__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Reverter> {
    return super.deploy(overrides || {}) as Promise<Reverter>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Reverter {
    return super.attach(address) as Reverter;
  }
  connect(signer: Signer): Reverter__factory {
    return super.connect(signer) as Reverter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReverterInterface {
    return new utils.Interface(_abi) as ReverterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Reverter {
    return new Contract(address, _abi, signerOrProvider) as Reverter;
  }
}

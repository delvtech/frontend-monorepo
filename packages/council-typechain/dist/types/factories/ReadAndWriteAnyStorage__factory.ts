/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ReadAndWriteAnyStorage,
  ReadAndWriteAnyStorageInterface,
} from "../ReadAndWriteAnyStorage";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "slot",
        type: "uint256",
      },
    ],
    name: "readStorage",
    outputs: [
      {
        internalType: "bytes32",
        name: "data",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "slot",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "data",
        type: "bytes32",
      },
    ],
    name: "writeStorage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060d68061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80632cab8335146037578063e10af4ad146058575b600080fd5b604660423660046069565b5490565b60405190815260200160405180910390f35b606760633660046080565b9055565b005b6000602082840312156079578081fd5b5035919050565b600080604083850312156091578081fd5b5050803592602090910135915056fea2646970667358221220770357450172981f64f5a15e108cbb6d601fb17bf92a717e4a302b00d2dbb00b64736f6c63430008030033";

export class ReadAndWriteAnyStorage__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ReadAndWriteAnyStorage> {
    return super.deploy(overrides || {}) as Promise<ReadAndWriteAnyStorage>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ReadAndWriteAnyStorage {
    return super.attach(address) as ReadAndWriteAnyStorage;
  }
  connect(signer: Signer): ReadAndWriteAnyStorage__factory {
    return super.connect(signer) as ReadAndWriteAnyStorage__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReadAndWriteAnyStorageInterface {
    return new utils.Interface(_abi) as ReadAndWriteAnyStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReadAndWriteAnyStorage {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ReadAndWriteAnyStorage;
  }
}

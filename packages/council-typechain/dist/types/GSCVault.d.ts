/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface GSCVaultInterface extends ethers.utils.Interface {
  functions: {
    "authorize(address)": FunctionFragment;
    "authorized(address)": FunctionFragment;
    "coreVoting()": FunctionFragment;
    "deauthorize(address)": FunctionFragment;
    "getUserVaults(address)": FunctionFragment;
    "idleDuration()": FunctionFragment;
    "isAuthorized(address)": FunctionFragment;
    "kick(address,bytes[])": FunctionFragment;
    "members(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "proveMembership(address[],bytes[])": FunctionFragment;
    "queryVotePower(address,uint256,bytes)": FunctionFragment;
    "setCoreVoting(address)": FunctionFragment;
    "setIdleDuration(uint256)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setVotePowerBound(uint256)": FunctionFragment;
    "votingPowerBound()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "authorize", values: [string]): string;
  encodeFunctionData(functionFragment: "authorized", values: [string]): string;
  encodeFunctionData(
    functionFragment: "coreVoting",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deauthorize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getUserVaults",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "idleDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "kick",
    values: [string, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "members", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proveMembership",
    values: [string[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "queryVotePower",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCoreVoting",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIdleDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setVotePowerBound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPowerBound",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "authorize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authorized", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "coreVoting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deauthorize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "idleDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kick", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proveMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryVotePower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCoreVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIdleDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVotePowerBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPowerBound",
    data: BytesLike
  ): Result;

  events: {
    "Kicked(address,uint256)": EventFragment;
    "MembershipProved(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Kicked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MembershipProved"): EventFragment;
}

export type KickedEvent = TypedEvent<
  [string, BigNumber] & { who: string; when: BigNumber }
>;

export type MembershipProvedEvent = TypedEvent<
  [string, BigNumber] & { who: string; when: BigNumber }
>;

export class GSCVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GSCVaultInterface;

  functions: {
    authorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    coreVoting(overrides?: CallOverrides): Promise<[string]>;

    deauthorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getUserVaults(who: string, overrides?: CallOverrides): Promise<[string[]]>;

    idleDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    isAuthorized(who: string, overrides?: CallOverrides): Promise<[boolean]>;

    kick(
      who: string,
      extraData: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { joined: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proveMembership(
      votingVaults: string[],
      extraData: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    queryVotePower(
      who: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setCoreVoting(
      _newVoting: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIdleDuration(
      _idleDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVotePowerBound(
      _newBound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    votingPowerBound(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  authorize(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  coreVoting(overrides?: CallOverrides): Promise<string>;

  deauthorize(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getUserVaults(who: string, overrides?: CallOverrides): Promise<string[]>;

  idleDuration(overrides?: CallOverrides): Promise<BigNumber>;

  isAuthorized(who: string, overrides?: CallOverrides): Promise<boolean>;

  kick(
    who: string,
    extraData: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  members(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  proveMembership(
    votingVaults: string[],
    extraData: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  queryVotePower(
    who: string,
    arg1: BigNumberish,
    arg2: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setCoreVoting(
    _newVoting: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIdleDuration(
    _idleDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVotePowerBound(
    _newBound: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  votingPowerBound(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    authorize(who: string, overrides?: CallOverrides): Promise<void>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    coreVoting(overrides?: CallOverrides): Promise<string>;

    deauthorize(who: string, overrides?: CallOverrides): Promise<void>;

    getUserVaults(who: string, overrides?: CallOverrides): Promise<string[]>;

    idleDuration(overrides?: CallOverrides): Promise<BigNumber>;

    isAuthorized(who: string, overrides?: CallOverrides): Promise<boolean>;

    kick(
      who: string,
      extraData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    members(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    proveMembership(
      votingVaults: string[],
      extraData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    queryVotePower(
      who: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCoreVoting(_newVoting: string, overrides?: CallOverrides): Promise<void>;

    setIdleDuration(
      _idleDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(who: string, overrides?: CallOverrides): Promise<void>;

    setVotePowerBound(
      _newBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    votingPowerBound(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Kicked(address,uint256)"(
      who?: string | null,
      when?: null
    ): TypedEventFilter<[string, BigNumber], { who: string; when: BigNumber }>;

    Kicked(
      who?: string | null,
      when?: null
    ): TypedEventFilter<[string, BigNumber], { who: string; when: BigNumber }>;

    "MembershipProved(address,uint256)"(
      who?: string | null,
      when?: null
    ): TypedEventFilter<[string, BigNumber], { who: string; when: BigNumber }>;

    MembershipProved(
      who?: string | null,
      when?: null
    ): TypedEventFilter<[string, BigNumber], { who: string; when: BigNumber }>;
  };

  estimateGas: {
    authorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    coreVoting(overrides?: CallOverrides): Promise<BigNumber>;

    deauthorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getUserVaults(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    idleDuration(overrides?: CallOverrides): Promise<BigNumber>;

    isAuthorized(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    kick(
      who: string,
      extraData: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    members(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proveMembership(
      votingVaults: string[],
      extraData: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    queryVotePower(
      who: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCoreVoting(
      _newVoting: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIdleDuration(
      _idleDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVotePowerBound(
      _newBound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    votingPowerBound(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    authorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authorized(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coreVoting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deauthorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getUserVaults(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    idleDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAuthorized(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kick(
      who: string,
      extraData: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proveMembership(
      votingVaults: string[],
      extraData: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    queryVotePower(
      who: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCoreVoting(
      _newVoting: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIdleDuration(
      _idleDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVotePowerBound(
      _newBound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    votingPowerBound(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

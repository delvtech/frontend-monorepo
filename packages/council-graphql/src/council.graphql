type Query {
  coreVoting: VotingContract
  gscVoting: VotingContract
  lockingVault: VotingVault
  vestingVault: VotingVault
  gscVault: VotingVault
}

type VotingContract {
  address: ID!
  name: String!
  votingVaults: [VotingVault!]!
  proposal(id: ID!): Proposal
  proposals(ids: [ID!], isVerified: Boolean): [Proposal]
  totalVotingPower(blockNumber: Int): TotalVotingPower
  voterPower(voter: ID!, blockNumber: Int): VoterPower
  voterPowers(voters: [ID!]!, blockNumber: Int): [VoterPower]
}

type VotingVault {
  address: ID!
  name: String!
  totalVotingPower(blockNumber: Int): TotalVotingPower
  voterPower(voter: ID!, blockNumber: Int): VoterPower
  voterPowers(voters: [ID!]!, blockNumber: Int): [VoterPower]
}

type Proposal {
  id: ID!
  votingContract: VotingContract!
  "Block Number"
  created: Int
  description: String
  "Block Number"
  expiration: Int
  isVerified: Boolean
  "Block Number"
  lastCall: Int
  quorum: String
  title: String
  "Block Number"
  unlock: Int
  vote(voter: ID!): Vote
  votes(voters: [ID!]!): [Vote]
  voterPower(voter: ID!): VoterPower
  voterPowers(voters: [ID!]!): [VoterPower]
}

type Vote {
  voter: ID!
  power: String!
  castBallot: Ballot
}

type VoterPower {
  blockNumber: Int!
  value: String!
  voter: ID!
  votingVaults: [VotingVault!]!
  isStale: Boolean
}

type TotalVotingPower {
  blockNumber: Int!
  value: String!
  votingVaults: [VotingVault!]!
}

enum Ballot {
  Yes
  No
  Abstain
}
{"mappings":"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","sources":["packages/core-v2-sdk/src/index.ts","packages/core-v2-sdk/src/client.ts","packages/core-v2-sdk/src/datasources/CachedDataSource.ts","packages/core-v2-sdk/src/datasources/ContractDataSource.ts","packages/core-v2-sdk/src/datasources/HTTPDataSource.ts","packages/core-v2-sdk/src/datasources/MultiPool/MultiPoolDataSource.ts","packages/core-v2-sdk/src/datasources/MultiPool/MultiPoolContractDataSource.ts","packages/core-v2-sdk/src/datasources/MultiTerm/MultiTermDataSource.ts","packages/core-v2-sdk/src/datasources/MultiTerm/MultiTermContractDataSource.ts","packages/core-v2-sdk/src/datasources/MultiTerm/ERC4626TermContractDataSource.ts","packages/core-v2-sdk/src/datasources/MultiTerm/CompoundV3TermContractDataSource.ts","packages/core-v2-sdk/src/datasources/Token/TokenDataSource.ts","packages/core-v2-sdk/src/datasources/Token/TokenContractDataSource.ts","packages/core-v2-sdk/src/datasources/TokenAPI/CoinGeckoAPIDataSource.ts","packages/core-v2-sdk/src/datasources/TokenAPI/TokenAPIDataSource.ts","packages/core-v2-sdk/src/datasources/YieldSource/YieldSourceDataSource.ts","packages/core-v2-sdk/src/datasources/YieldSource/UnknownYieldSourceDataSource.ts","packages/core-v2-sdk/src/datasources/YieldSource/ERC4626ContractDataSource.ts","packages/core-v2-sdk/src/models/MultiPool.ts","packages/core-v2-sdk/src/models/MultiTerm.ts","packages/core-v2-sdk/src/models/Token.ts","packages/core-v2-sdk/src/models/YieldSource.ts","packages/core-v2-sdk/src/models/Term.ts","packages/core-v2-sdk/src/models/PrincipalToken.ts","packages/core-v2-sdk/src/models/YieldToken.ts","packages/core-v2-sdk/src/models/Pool.ts","packages/core-v2-sdk/src/utils/buyYieldTokens/buyYieldTokens.ts","packages/core-v2-sdk/src/utils/calcSwapCongergentCurvePool/calculateTradePrincipalTokens.ts","packages/core-v2-sdk/src/utils/calculateLPTokensOut/calculateLPTokensOut.ts","packages/core-v2-sdk/src/utils/provideLiquidity/provideLiquidity.ts","packages/core-v2-sdk/src/utils/redeemLiquidity/redeemLiquidity.ts","packages/core-v2-sdk/src/utils/tradePrincipalTokens/tradePrincipalTokens.ts","packages/core-v2-sdk/src/utils/withdrawLiquidity/withdrawLiquidity.ts"],"sourcesContent":["export * from \"./client\";\n\nexport * from \"./datasources/CachedDataSource\";\nexport * from \"./datasources/ContractDataSource\";\nexport * from \"./datasources/HTTPDataSource\";\n\nexport * from \"./datasources/MultiPool/MultiPoolDataSource\";\nexport * from \"./datasources/MultiPool/MultiPoolContractDataSource\";\n\nexport * from \"./datasources/MultiTerm/MultiTermDataSource\";\nexport * from \"./datasources/MultiTerm/MultiTermContractDataSource\";\nexport * from \"./datasources/MultiTerm/ERC4626TermContractDataSource\";\nexport * from \"./datasources/MultiTerm/CompoundV3TermContractDataSource\";\n\nexport * from \"./datasources/Token/TokenDataSource\";\nexport * from \"./datasources/Token/TokenContractDataSource\";\n\nexport * from \"./datasources/TokenAPI/TokenAPIDataSource\";\nexport * from \"./datasources/TokenAPI/CoinGeckoAPIDataSource\";\n\nexport * from \"./datasources/YieldSource/YieldSourceDataSource\";\nexport * from \"./datasources/YieldSource/UnknownYieldSourceDataSource\";\nexport * from \"./datasources/YieldSource/ERC4626ContractDataSource\";\n\nexport * from \"./models/MultiPool\";\nexport * from \"./models/MultiTerm\";\nexport * from \"./models/Pool\";\nexport * from \"./models/Term\";\nexport * from \"./models/Token\";\nexport * from \"./models/YieldSource\";\n\nexport * from \"./utils/buyYieldTokens/buyYieldTokens\";\nexport * from \"./utils/calcSwapCongergentCurvePool/calculateTradePrincipalTokens\";\nexport * from \"./utils/calculateLPTokensOut/calculateLPTokensOut\";\nexport * from \"./utils/provideLiquidity/provideLiquidity\";\nexport * from \"./utils/redeemLiquidity/redeemLiquidity\";\nexport * from \"./utils/tradePrincipalTokens/tradePrincipalTokens\";\nexport * from \"./utils/withdrawLiquidity/withdrawLiquidity\";\n","import { providers } from \"ethers\";\n\nexport interface ElementClientOptions {\n  chainId: number;\n  provider: providers.BaseProvider;\n  dataSources?: Record<string, any>[];\n}\n\nexport class ElementClient {\n  chainId: number;\n  provider: providers.BaseProvider;\n  dataSources: Record<string, any>[];\n\n  constructor({ chainId, provider, dataSources = [] }: ElementClientOptions) {\n    this.chainId = chainId;\n    this.provider = provider;\n    this.dataSources = dataSources;\n  }\n\n  // TODO: Should data sources take on the responsibility of uniquely identifying themselves?\n  getDataSource<T extends Record<string, any>>(filter: Partial<T>): T | null {\n    const dataSource = this.dataSources.find((dataSource) => {\n      let isMatch = true;\n      for (const [key, value] of Object.entries(filter)) {\n        if (!dataSource[key] !== value) {\n          isMatch = false;\n        }\n      }\n      return isMatch;\n    });\n    return (dataSource as T) ?? null;\n  }\n\n  setDataSource<T extends Record<string, any>>(\n    filter: Partial<T>,\n    // TODO: This could be turned into a callback function that's only called\n    // when there isn't an existing data source to avoid the wasted effort of\n    // constructing a new data source when one already exists.\n    dataSource: T,\n  ): T {\n    const existing = this.getDataSource(filter);\n    if (existing) {\n      return existing;\n    }\n    this.dataSources.push(dataSource);\n    return dataSource;\n  }\n}\n","import { cached } from \"@elementfi/base\";\nimport LRUCache from \"lru-cache\";\n\nexport class CachedDataSource {\n  cache: LRUCache<string, any>;\n\n  constructor(cache?: LRUCache<string, any>) {\n    this.cache = cache ?? new LRUCache({ max: 500 });\n  }\n\n  cached<T extends (...args: any) => any>(\n    cacheKey: unknown,\n    callback: T,\n  ): ReturnType<T> {\n    return cached({\n      cacheKey,\n      cache: this.cache,\n      callback,\n    });\n  }\n}\n","import { BaseContract } from \"ethers\";\nimport LRUCache from \"lru-cache\";\nimport { CachedDataSource } from \"./CachedDataSource\";\n\ntype AnyFunction = (...args: any) => any;\n\nexport type FunctionKeys<T> = Exclude<\n  {\n    [K in keyof T]: T[K] extends AnyFunction ? K : never;\n  }[keyof T],\n  undefined\n>;\n\n// TODO: add a method for event queries\nexport class ContractDataSource<\n  T extends BaseContract,\n> extends CachedDataSource {\n  address: string;\n  contract: T;\n\n  constructor(contract: T, cache?: LRUCache<string, any>) {\n    super(cache);\n    this.address = contract.address;\n    this.contract = contract;\n  }\n\n  call<K extends FunctionKeys<T>>(\n    property: K,\n    args: T[K] extends AnyFunction ? Parameters<T[K]> : never,\n  ): T[K] extends AnyFunction ? ReturnType<T[K]> : never {\n    return this.cached([property, ...args], () => {\n      const contract = this.contract as T;\n      const fn = contract[property] as unknown as AnyFunction;\n      return fn(...args);\n    });\n  }\n}\n","import { CachedDataSource } from \"./CachedDataSource\";\n\nexport class HTTPDataSource<T = any> extends CachedDataSource {\n  baseURL: string;\n  defaultRequestOptions: RequestInit;\n  defaultGetOptions: RequestInit;\n  defaultPostOptions: RequestInit;\n  defaultPutOptions: RequestInit;\n  defaultDeleteOptions: RequestInit;\n  onResponse: (res: Response) => Promise<T>;\n\n  constructor(\n    baseURL: string,\n    options?: {\n      defaultRequestOptions?: RequestInit;\n      defaultGetOptions?: RequestInit;\n      defaultPostOptions?: RequestInit;\n      defaultPutOptions?: RequestInit;\n      defaultDeleteOptions?: RequestInit;\n      onResponse?: (res: Response) => Promise<T>;\n    },\n  ) {\n    super();\n    this.baseURL = baseURL;\n    this.defaultRequestOptions = options?.defaultRequestOptions ?? {};\n    this.defaultGetOptions = options?.defaultGetOptions ?? { method: \"GET\" };\n    this.defaultPostOptions = options?.defaultPostOptions ?? { method: \"POST\" };\n    this.defaultPutOptions = options?.defaultPutOptions ?? { method: \"PUT\" };\n    this.defaultDeleteOptions = options?.defaultDeleteOptions ?? {\n      method: \"DELETE\",\n    };\n    this.onResponse = options?.onResponse ?? ((res: Response) => res.json());\n  }\n\n  // Create\n  post<T>(path: string, options: RequestInit): Promise<T> {\n    return this.cached(\n      [\"post\", path, options.body],\n      () =>\n        fetch(`${this.baseURL}${path}`, {\n          ...this.defaultRequestOptions,\n          ...this.defaultPostOptions,\n          ...options,\n        }).then(this.onResponse) as Promise<T>,\n    );\n  }\n\n  // Read\n  get<T>(path: string, options: RequestInit = {}): Promise<T> {\n    return this.cached(\n      [\"get\", path],\n      () =>\n        fetch(`${this.baseURL}${path}`, {\n          ...this.defaultRequestOptions,\n          ...this.defaultGetOptions,\n          ...options,\n        }).then(this.onResponse) as Promise<T>,\n    );\n  }\n\n  // Update\n  put<T>(path: string, options: RequestInit): Promise<T> {\n    return this.cached(\n      [\"put\", path, options.body],\n      () =>\n        fetch(`${this.baseURL}${path}`, {\n          ...this.defaultRequestOptions,\n          ...this.defaultPutOptions,\n          ...options,\n        }).then(this.onResponse) as Promise<T>,\n    );\n  }\n\n  // Delete\n  delete<T>(path: string, options: RequestInit = {}): Promise<T> {\n    return this.cached(\n      [\"delete\", path],\n      () =>\n        fetch(`${this.baseURL}${path}`, {\n          ...this.defaultRequestOptions,\n          ...this.defaultDeleteOptions,\n          ...options,\n        }).then(this.onResponse) as Promise<T>,\n    );\n  }\n}\n","export interface MultiPoolDataSource {\n  address: string;\n  getPoolIds: (fromBlock?: number, toBlock?: number) => Promise<number[]>;\n  getMultiTerm: () => Promise<string>;\n  getShareReserves: (tokenId: string) => Promise<string>;\n  getBondReserves: (tokenId: string) => Promise<string>;\n}\n","import { providers } from \"ethers\";\nimport { Pool, Pool__factory } from \"@elementfi/core-v2-typechain\";\nimport { ContractDataSource } from \"src/datasources/ContractDataSource\";\nimport { MultiPoolDataSource } from \"./MultiPoolDataSource\";\n\nexport class MultiPoolContractDataSource\n  extends ContractDataSource<Pool>\n  implements MultiPoolDataSource\n{\n  constructor(address: string, provider: providers.BaseProvider) {\n    super(Pool__factory.connect(address, provider));\n  }\n\n  getPoolIds(fromBlock?: number, toBlock?: number): Promise<number[]> {\n    return this.cached([\"getPoolIds\", fromBlock, toBlock], async () => {\n      const eventFilter = this.contract.filters.PoolRegistered();\n      const events = await this.contract.queryFilter(\n        eventFilter,\n        fromBlock,\n        toBlock,\n      );\n      return events.map((event) => event.args.poolId.toNumber());\n    });\n  }\n\n  getMultiTerm(): Promise<string> {\n    return this.call(\"term\", []);\n  }\n\n  async getReserves(tokenId: string): Promise<{\n    shares: string;\n    bonds: string;\n  }> {\n    const [sharesBigNumber, bondsBigNumber] = await this.call(\"reserves\", [\n      tokenId,\n    ]);\n    return {\n      shares: sharesBigNumber.toString(),\n      bonds: bondsBigNumber.toString(),\n    };\n  }\n\n  async getShareReserves(tokenId: string): Promise<string> {\n    const { shares } = await this.getReserves(tokenId);\n    return shares;\n  }\n\n  async getBondReserves(tokenId: string): Promise<any> {\n    const { bonds } = await this.getReserves(tokenId);\n    return bonds;\n  }\n}\n","export interface MultiTermDataSource {\n  address: string;\n  getTermIds: (fromBlock?: number, toBlock?: number) => Promise<number[]>;\n  getCreatedAtBlock: (tokenId: number) => Promise<number | null>;\n  getYieldSource: () => Promise<string | null>;\n  getBaseAsset: () => Promise<string>;\n  getSymbol: (tokenId: number) => Promise<string>;\n  getDecimals: () => Promise<number>;\n  getName: (tokenId: number) => Promise<string>;\n  getBalanceOf: (tokenId: number, address: string) => Promise<string>;\n}\n","import { ethers, providers } from \"ethers\";\nimport { Term, Term__factory } from \"@elementfi/core-v2-typechain\";\nimport { TransferSingleEvent } from \"@elementfi/core-v2-typechain/dist/contracts/Term\";\nimport { MultiTermDataSource } from \"./MultiTermDataSource\";\nimport { ContractDataSource } from \"src/datasources/ContractDataSource\";\n\nexport class MultiTermContractDataSource\n  extends ContractDataSource<Term>\n  implements MultiTermDataSource\n{\n  constructor(address: string, provider: providers.BaseProvider) {\n    super(Term__factory.connect(address, provider));\n  }\n\n  getTransferEvents(\n    from?: string | null,\n    to?: string | null,\n    fromBlock?: number,\n    toBlock?: number,\n  ): Promise<TransferSingleEvent[]> {\n    return this.cached(\n      [\"TransferSingle\", from, to, fromBlock, toBlock],\n      async () => {\n        const eventFilter = this.contract.filters.TransferSingle(\n          null,\n          from,\n          to,\n        );\n        return this.contract.queryFilter(eventFilter, fromBlock, toBlock);\n      },\n    );\n  }\n\n  async getTermIds(fromBlock?: number, toBlock?: number): Promise<number[]> {\n    return this.cached([\"getTermIds\", fromBlock, toBlock], async () => {\n      // TODO: Filter out yield token addresses\n      const events = await this.getTransferEvents(\n        // new mints result in a transfer from the zero address\n        ethers.constants.AddressZero,\n        null,\n        fromBlock,\n        toBlock,\n      );\n      return Array.from(\n        new Set(events.map((event) => event.args.id.toNumber())),\n      );\n    });\n  }\n\n  getCreatedAtBlock(tokenId: number): Promise<number | null> {\n    return this.cached([\"getCreatedAtBlock\", tokenId], async () => {\n      const events = await this.getTransferEvents(\n        // new mints result in a transfer from the zero address\n        ethers.constants.AddressZero,\n        null,\n      );\n      const firstTransferEvent = events.find(({ args }) => args.id.eq(tokenId));\n      return firstTransferEvent?.blockNumber || null;\n    });\n  }\n\n  async getYieldSource(): Promise<null> {\n    // TODO: Replace with appropriate Term.sol yield source property once added\n    // console.warn('Idk how to do that')\n    return null;\n  }\n\n  async getBaseAsset(): Promise<string> {\n    return this.call(\"token\", []);\n  }\n\n  getSymbol(tokenId: number): Promise<string> {\n    return this.call(\"symbol\", [tokenId]);\n  }\n\n  getDecimals(): Promise<number> {\n    return this.call(\"decimals\", []);\n  }\n\n  getName(tokenId: number): Promise<string> {\n    return this.call(\"name\", [tokenId]);\n  }\n\n  async getBalanceOf(tokenId: number, address: string): Promise<string> {\n    const balanceBigNumber = await this.call(\"balanceOf\", [tokenId, address]);\n    return balanceBigNumber.toString();\n  }\n}\n","import { providers } from \"ethers\";\nimport {\n  ERC4626Term,\n  ERC4626Term__factory,\n} from \"@elementfi/core-v2-typechain\";\nimport { ContractDataSource } from \"src/datasources/ContractDataSource\";\nimport { MultiTermContractDataSource } from \"./MultiTermContractDataSource\";\n\nexport class ERC4626TermContractDataSource extends MultiTermContractDataSource {\n  contract: ERC4626Term;\n\n  constructor(address: string, provider: providers.BaseProvider) {\n    super(address, provider);\n    this.contract = ERC4626Term__factory.connect(address, provider);\n  }\n\n  getYieldSourceAddress(\n    this: ContractDataSource<ERC4626Term>,\n  ): Promise<string> {\n    return this.call(\"vault\", []);\n  }\n}\n","import { providers } from \"ethers\";\nimport {\n  CompoundV3Term,\n  CompoundV3Term__factory,\n} from \"@elementfi/core-v2-typechain\";\nimport { ContractDataSource } from \"src/datasources/ContractDataSource\";\nimport { MultiTermContractDataSource } from \"./MultiTermContractDataSource\";\n\nexport class CompoundV3TermContractDataSource extends MultiTermContractDataSource {\n  contract: CompoundV3Term;\n\n  constructor(address: string, provider: providers.BaseProvider) {\n    super(address, provider);\n    this.contract = CompoundV3Term__factory.connect(address, provider);\n  }\n\n  getYieldSourceAddress(\n    this: ContractDataSource<CompoundV3Term>,\n  ): Promise<string> {\n    return this.call(\"yieldSource\", []);\n  }\n}\n","export interface TokenDataSource {\n  address: string;\n  getSymbol: () => Promise<string>;\n  getDecimals: () => Promise<number>;\n  getName: () => Promise<string>;\n  getPrice: (currency: string) => Promise<number>;\n  getAllowance: (owner: string, spender: string) => Promise<string>;\n  getBalanceOf: (address: string) => Promise<string>;\n}\n","import { providers } from \"ethers\";\nimport { ERC20, ERC20__factory } from \"@elementfi/core-v2-typechain\";\nimport { ContractDataSource } from \"src/datasources/ContractDataSource\";\nimport { TokenAPIDataSource } from \"src/datasources/TokenAPI/TokenAPIDataSource\";\nimport { CoinGeckoAPIDataSource } from \"src/datasources/TokenAPI/CoinGeckoAPIDataSource\";\nimport { TokenDataSource } from \"./TokenDataSource\";\n\nexport class TokenContractDataSource implements TokenDataSource {\n  address: string;\n  apiDataSource: TokenAPIDataSource;\n  erc20DataSource: ContractDataSource<ERC20>;\n\n  constructor(\n    address: string,\n    provider: providers.BaseProvider,\n    options?: {\n      apiDataSource?: TokenAPIDataSource;\n      erc20DataSource?: ContractDataSource<ERC20>;\n    },\n  ) {\n    this.address = address;\n    this.apiDataSource = options?.apiDataSource ?? new CoinGeckoAPIDataSource();\n    this.erc20DataSource =\n      options?.erc20DataSource ??\n      new ContractDataSource<ERC20>(ERC20__factory.connect(address, provider));\n  }\n\n  getSymbol(): Promise<string> {\n    return this.erc20DataSource.call(\"symbol\", []);\n  }\n\n  getDecimals(): Promise<number> {\n    return this.erc20DataSource.call(\"decimals\", []);\n  }\n\n  getName(): Promise<string> {\n    return this.erc20DataSource.call(\"name\", []);\n  }\n\n  async getPrice(currency: string): Promise<number> {\n    // TODO: find a more reliable way to get the id\n    const id = await (await this.getName()).toLowerCase();\n    return this.apiDataSource.getTokenPrice(id, currency);\n  }\n\n  async getAllowance(owner: string, spender: string): Promise<string> {\n    const balanceBigNumber = await this.erc20DataSource.call(\"allowance\", [\n      owner,\n      spender,\n    ]);\n    return balanceBigNumber.toString();\n  }\n\n  async getBalanceOf(address: string): Promise<string> {\n    const balanceBigNumber = await this.erc20DataSource.call(\"balanceOf\", [\n      address,\n    ]);\n    return balanceBigNumber.toString();\n  }\n}\n","import { HTTPDataSource } from \"src/datasources/HTTPDataSource\";\n\nexport class CoinGeckoAPIDataSource extends HTTPDataSource {\n  static baseURL: \"https://api.coingecko.com/api/v3/\";\n\n  constructor() {\n    super(\"https://api.coingecko.com/api/v3/\");\n  }\n\n  async getTokenPrice<ID extends string, CODE extends string>(\n    id: ID,\n    currency: CODE,\n  ): Promise<number> {\n    const res = await this.get<Record<ID, Record<CODE, number>>>(\n      `/simple/price?ids=${id}&vs_currencies=${currency ?? \"usd\"}`,\n    );\n    return res[id]?.[currency] ?? 1;\n  }\n}\n","export interface TokenAPIDataSource {\n  getTokenPrice: (id: string, currency: string) => Promise<number>;\n}\n","export interface YieldSourceDataSource {\n  address: string;\n  getName: () => Promise<string>;\n}\n","import { YieldSourceDataSource } from \"./YieldSourceDataSource\";\nimport { CachedDataSource } from \"src/datasources/CachedDataSource\";\n\nexport class UnknownYieldSourceDataSource\n  extends CachedDataSource\n  implements YieldSourceDataSource\n{\n  address: string;\n\n  constructor(address: string) {\n    super();\n    this.address = address;\n  }\n\n  async getName(): Promise<string> {\n    return this.cached(\"getName\", async () => \"Unnamed YieldSource\");\n  }\n}\n","import { providers } from \"ethers\";\nimport { ERC4626, ERC4626__factory } from \"@elementfi/core-v2-typechain\";\nimport { ContractDataSource } from \"src/datasources/ContractDataSource\";\nimport { YieldSourceDataSource } from \"./YieldSourceDataSource\";\n\nexport class ERC4626ContractDataSource\n  extends ContractDataSource<ERC4626>\n  implements YieldSourceDataSource\n{\n  constructor(address: string, provider: providers.BaseProvider) {\n    super(ERC4626__factory.connect(address, provider));\n  }\n\n  async getName(): Promise<string> {\n    return this.call(\"name\", []);\n  }\n}\n","import { ElementClient } from \"src/client\";\nimport { MultiPoolContractDataSource } from \"src/datasources/MultiPool/MultiPoolContractDataSource\";\nimport { MultiPoolDataSource } from \"src/datasources/MultiPool/MultiPoolDataSource\";\nimport { MultiTerm } from \"./MultiTerm\";\nimport { Pool } from \"./Pool\";\nimport { Token } from \"./Token\";\nimport { YieldSource } from \"./YieldSource\";\n\nexport class MultiPool {\n  address: string;\n  client: ElementClient;\n  dataSource: MultiPoolDataSource;\n\n  constructor(\n    address: string,\n    client: ElementClient,\n    dataSource?: MultiPoolDataSource,\n  ) {\n    this.address = address;\n    this.client = client;\n    this.dataSource =\n      dataSource ??\n      client.setDataSource(\n        { address },\n        new MultiPoolContractDataSource(address, client.provider),\n      );\n  }\n\n  async getPool(expiryTimestamp: number): Promise<Pool | null> {\n    // TODO: should this validate that the pool exists?\n    return new Pool(expiryTimestamp, this.client, this);\n  }\n\n  async getPools(fromBlock?: number, toBlock?: number): Promise<Pool[]> {\n    const poolIds = await this.dataSource.getPoolIds(fromBlock, toBlock);\n    return poolIds.map((id) => new Pool(id, this.client, this));\n  }\n\n  async getMultiTerm(): Promise<MultiTerm> {\n    const address = await this.dataSource.getMultiTerm();\n    return new MultiTerm(address, this.client);\n  }\n\n  async getYieldSource(): Promise<YieldSource | null> {\n    const multiTerm = await this.getMultiTerm();\n    return multiTerm.getYieldSource();\n  }\n\n  async getBaseAsset(): Promise<Token> {\n    const multiTerm = await this.getMultiTerm();\n    return multiTerm.getBaseAsset();\n  }\n}\n","import { ElementClient } from \"src/client\";\nimport { MultiTermDataSource } from \"src/datasources/MultiTerm/MultiTermDataSource\";\nimport { MultiTermContractDataSource } from \"src/datasources/MultiTerm/MultiTermContractDataSource\";\nimport { Token } from \"./Token\";\nimport { YieldSource } from \"./YieldSource\";\nimport { Term } from \"./Term\";\n\nexport class MultiTerm {\n  address: string;\n  client: ElementClient;\n  dataSource: MultiTermDataSource;\n\n  constructor(\n    address: string,\n    client: ElementClient,\n    dataSource?: MultiTermDataSource,\n  ) {\n    this.address = address;\n    this.client = client;\n    this.dataSource =\n      dataSource ??\n      client.setDataSource(\n        { address },\n        new MultiTermContractDataSource(address, client.provider),\n      );\n  }\n\n  async getTerm(expiryTimestamp: number): Promise<Term | null> {\n    // TODO: should this validate that the term exists?\n    return new Term(expiryTimestamp, this.client, this);\n  }\n\n  async getTerms(fromBlock?: number, toBlock?: number): Promise<Term[]> {\n    const termIds = await this.dataSource.getTermIds(fromBlock, toBlock);\n    return termIds.map((id) => new Term(id, this.client, this));\n  }\n\n  async getYieldSource(): Promise<YieldSource | null> {\n    const address = await this.dataSource.getYieldSource();\n    if (!address) {\n      return null;\n    }\n    return new YieldSource(address, this.client);\n  }\n\n  async getBaseAsset(): Promise<Token> {\n    const address = await this.dataSource.getBaseAsset();\n    return new Token(address, this.client);\n  }\n\n  getDecimals(): Promise<number> {\n    return this.dataSource.getDecimals();\n  }\n\n  // TODO:\n  async getTVL(atBlock: number): Promise<string> {\n    return \"0\";\n  }\n}\n","import { ElementClient } from \"src/client\";\nimport { TokenContractDataSource } from \"src/datasources/Token/TokenContractDataSource\";\nimport { TokenDataSource } from \"src/datasources/Token/TokenDataSource\";\nimport { CoinGeckoAPIDataSource } from \"src/datasources/TokenAPI/CoinGeckoAPIDataSource\";\n\nexport class Token {\n  address: string;\n  client: ElementClient;\n  dataSource: TokenDataSource;\n\n  constructor(\n    address: string,\n    client: ElementClient,\n    dataSource?: TokenDataSource,\n  ) {\n    this.address = address;\n    this.client = client;\n    if (dataSource) {\n      this.dataSource = dataSource;\n    } else {\n      const tokenAPIDataSource = client.setDataSource(\n        { baseURL: CoinGeckoAPIDataSource.baseURL },\n        new CoinGeckoAPIDataSource(),\n      );\n      this.dataSource = client.setDataSource(\n        { address },\n        new TokenContractDataSource(address, client.provider, {\n          apiDataSource: tokenAPIDataSource,\n        }),\n      );\n    }\n  }\n\n  getSymbol(): Promise<string> {\n    return this.dataSource.getSymbol();\n  }\n\n  getDecimals(): Promise<number> {\n    return this.dataSource.getDecimals();\n  }\n\n  getName(): Promise<string> {\n    return this.dataSource.getName();\n  }\n\n  getPrice(currency: string): Promise<number> {\n    return this.dataSource.getPrice(currency);\n  }\n\n  getAllowance(owner: string, spender: string): Promise<string> {\n    return this.dataSource.getAllowance(owner, spender);\n  }\n\n  getBalanceOf(address: string): Promise<string> {\n    return this.dataSource.getBalanceOf(address);\n  }\n}\n","import { ElementClient } from \"src/client\";\nimport { YieldSourceDataSource } from \"src/datasources/YieldSource/YieldSourceDataSource\";\nimport { UnknownYieldSourceDataSource } from \"src/datasources/YieldSource/UnknownYieldSourceDataSource\";\n\nexport class YieldSource {\n  address: string;\n  client: ElementClient;\n  dataSource: YieldSourceDataSource;\n\n  constructor(\n    address: string,\n    client: ElementClient,\n    dataSource?: YieldSourceDataSource,\n  ) {\n    this.address = address;\n    this.client = client;\n    this.dataSource =\n      dataSource ??\n      client.setDataSource(\n        { address },\n        new UnknownYieldSourceDataSource(address),\n      );\n  }\n\n  getName(): Promise<string> {\n    return this.dataSource.getName();\n  }\n}\n","import { ElementClient } from \"src/client\";\nimport { MultiTerm } from \"./MultiTerm\";\nimport { PrincipalToken } from \"./PrincipalToken\";\nimport { Token } from \"./Token\";\nimport { YieldSource } from \"./YieldSource\";\nimport { YieldToken } from \"./YieldToken\";\n\nexport class Term {\n  id: number;\n  client: ElementClient;\n  multiTerm: MultiTerm;\n  principalToken: PrincipalToken;\n\n  constructor(id: number, client: ElementClient, multiTerm: MultiTerm) {\n    this.id = id;\n    this.client = client;\n    this.multiTerm = multiTerm;\n    this.principalToken = new PrincipalToken(id, client, this);\n  }\n\n  get maturity(): number {\n    return this.id;\n  }\n\n  getYieldSource(): Promise<YieldSource | null> {\n    return this.multiTerm.getYieldSource();\n  }\n\n  getBaseAsset(): Promise<Token> {\n    return this.multiTerm.getBaseAsset();\n  }\n\n  // TODO:\n  async tvl(atBlock: number): Promise<string> {\n    return \"0\";\n  }\n\n  createdAtBlock(): Promise<number | null> {\n    return this.multiTerm.dataSource.getCreatedAtBlock(this.id);\n  }\n\n  // TODO: How do I get the token ID with a start and end date?\n  getYieldToken(startTimeStamp: number): YieldToken {\n    return new YieldToken(this.id, this.client, this);\n  }\n}\n","import { ElementClient } from \"src/client\";\nimport { Term } from \"./Term\";\nimport { Token } from \"./Token\";\n\nexport class PrincipalToken {\n  id: number;\n  client: ElementClient;\n  term: Term;\n\n  constructor(id: number, client: ElementClient, term: Term) {\n    this.id = id;\n    this.client = client;\n    this.term = term;\n  }\n\n  get maturity(): number {\n    return this.id;\n  }\n\n  async getBaseAsset(): Promise<Token> {\n    return this.term.getBaseAsset();\n  }\n\n  async getSymbol(): Promise<string> {\n    return this.term.multiTerm.dataSource.getSymbol(this.id);\n  }\n\n  async getDecimals(): Promise<number> {\n    return this.term.multiTerm.getDecimals();\n  }\n\n  async getName(): Promise<string> {\n    return this.term.multiTerm.dataSource.getName(this.id);\n  }\n\n  async getBalanceOf(address: string): Promise<string> {\n    return this.term.multiTerm.dataSource.getBalanceOf(this.id, address);\n  }\n}\n","import { ElementClient } from \"src/client\";\nimport { Term } from \"./Term\";\nimport { Token } from \"./Token\";\n\nexport class YieldToken {\n  id: number;\n  client: ElementClient;\n  term: Term;\n\n  constructor(id: number, client: ElementClient, term: Term) {\n    this.id = id;\n    this.client = client;\n    this.term = term;\n  }\n\n  get maturity(): number {\n    return this.id;\n  }\n\n  async getBaseAsset(): Promise<Token> {\n    return this.term.getBaseAsset();\n  }\n\n  async getSymbol(): Promise<string> {\n    return this.term.multiTerm.dataSource.getSymbol(this.id);\n  }\n\n  async getDecimals(): Promise<number> {\n    return this.term.multiTerm.dataSource.getDecimals();\n  }\n\n  async getName(): Promise<string> {\n    return this.term.multiTerm.dataSource.getName(this.id);\n  }\n\n  async getBalanceOf(address: string): Promise<string> {\n    return this.term.multiTerm.dataSource.getBalanceOf(this.id, address);\n  }\n\n  // TODO:\n  async getAccruedInterest(): Promise<string> {\n    return \"0\";\n  }\n}\n","import { ElementClient } from \"src/client\";\nimport { MultiPool } from \"./MultiPool\";\nimport { Token } from \"./Token\";\nimport { YieldSource } from \"./YieldSource\";\n\nexport class Pool {\n  id: number;\n  client: ElementClient;\n  multiPool: MultiPool;\n\n  constructor(id: number, client: ElementClient, multiPool: MultiPool) {\n    this.id = id;\n    this.client = client;\n    this.multiPool = multiPool;\n  }\n\n  get maturity(): number {\n    return this.id;\n  }\n\n  getYieldSource(): Promise<YieldSource | null> {\n    return this.multiPool.getYieldSource();\n  }\n\n  getBaseAsset(): Promise<Token> {\n    return this.multiPool.getBaseAsset();\n  }\n\n  // TODO:\n  async getBaseAssetReserves(): Promise<string> {\n    return \"0\";\n  }\n\n  async shareAsset(): Promise<Token | null> {\n    const yieldSource = await this.getYieldSource();\n    if (!yieldSource) {\n      return null;\n    }\n    return new Token(yieldSource.address, this.client);\n  }\n}\n","import {\n  BigNumber,\n  BigNumberish,\n  ContractReceipt,\n  ContractTransaction,\n  Overrides,\n  Signer,\n} from \"ethers\";\n\n/**\n * A method to buy yield tokens.  Unclear at this point if this is simply performing the internal flashloan to perform a YTC.\n * @param tokenAddress\n * @param vaultAddress\n * @param amount\n * @param signer\n * @param overrides\n * @returns\n */\nexport async function buyYieldTokens(\n  tokenAddress: string,\n  vaultAddress: string,\n  amount: BigNumberish,\n  signer: Signer,\n  overrides: Overrides = {},\n): Promise<ContractTransaction> {\n  const signerAddress = await signer.getAddress();\n\n  return {\n    hash: \"0x00\",\n    from: signerAddress,\n    gasLimit: BigNumber.from(100),\n    data: \"0x\",\n    value: BigNumber.from(amount),\n    confirmations: 1,\n    chainId: 1,\n    nonce: 1,\n    wait: async () => Promise.resolve({} as unknown as ContractReceipt),\n  };\n}\n","import {\n  BigNumber,\n  BigNumberish,\n  ContractReceipt,\n  ContractTransaction,\n  Overrides,\n  Signer,\n} from \"ethers\";\n\n/**\n * calculates a trade of prinicipal tokens\n * this is likely to get a lot more complicated with swap kinds, exact in, exact out etc\n * @param tokenAmountsIn\n * @param tokenReserves\n * @returns\n */\nexport function calcSwapConvergentCurvePool(\n  tokenAmountsIn: BigNumberish[],\n  tokenReserves: BigNumberish[],\n): string {\n  return \"1\";\n}\n","import { BigNumberish } from \"ethers\";\n\n/**\n * calculates an amount of LP tokens out for an amount of asset provided.  could be single sided or double sided.\n * this one is likely to get a lot more complicated.  there could be join kinds like exact amount in, exact amount out etc.\n * @param tokenAmountsIn\n * @param tokenReserves\n * @returns\n */\nexport function calculateLPTokensOut(\n  tokenAmountsIn: BigNumberish[],\n  tokenReserves: BigNumberish[],\n): string {\n  return \"1\";\n}\n","import {\n  BigNumber,\n  BigNumberish,\n  ContractReceipt,\n  ContractTransaction,\n  Overrides,\n  Signer,\n} from \"ethers\";\n\n/**\n * A function to provide liquidity to a v2 term\n * @param tokensInAddresses\n * @param amounts\n * @param vaultAddress\n * @param slippage\n * @param signer\n * @param overrides\n * @returns\n */\nexport async function provideLiquidity(\n  amounts: BigNumberish[],\n  tokensInAddresses: string[],\n  vaultAddress: string,\n  slippage: BigNumberish,\n  signer: Signer,\n  overrides: Overrides = {},\n): Promise<ContractTransaction> {\n  const signerAddress = await signer.getAddress();\n\n  return {\n    hash: \"0x00\",\n    from: signerAddress,\n    gasLimit: BigNumber.from(100),\n    data: \"0x\",\n    value: BigNumber.from(amounts[0]),\n    confirmations: 1,\n    chainId: 1,\n    nonce: 1,\n    wait: async () => Promise.resolve({} as unknown as ContractReceipt),\n  };\n}\n","import {\n  BigNumber,\n  BigNumberish,\n  ContractReceipt,\n  ContractTransaction,\n  Overrides,\n  Signer,\n} from \"ethers\";\n\n/**\n * redeem liquidity after the term is mature to the underlying\n * @param amount\n * @param poolAddress\n * @param signer\n * @param overrides\n * @returns\n */\nexport async function redeemLiquidity(\n  amount: BigNumberish,\n  poolAddress: string,\n  signer: Signer,\n  overrides: Overrides = {},\n): Promise<ContractTransaction> {\n  const signerAddress = await signer.getAddress();\n\n  return {\n    hash: \"0x00\",\n    from: signerAddress,\n    gasLimit: BigNumber.from(100),\n    data: \"0x\",\n    value: BigNumber.from(amount),\n    confirmations: 1,\n    chainId: 1,\n    nonce: 1,\n    wait: async () => Promise.resolve({} as unknown as ContractReceipt),\n  };\n}\n","import {\n  BigNumber,\n  BigNumberish,\n  ContractReceipt,\n  ContractTransaction,\n  Overrides,\n  Signer,\n} from \"ethers\";\n\n/**\n * performs a trade of principal tokens on a v2 pool\n * this is likely to get a lot more complicated with swap kinds, exact in, exact out etc\n * @param tokenInAddress\n * @param tokenOutAddress\n * @param vaultAddress\n * @param amount\n * @param slippage\n * @param signer\n * @param overrides\n * @returns\n */\nexport async function tradePrincipalTokens(\n  amount: BigNumberish,\n  tokenInAddress: string,\n  tokenOutAddress: string,\n  vaultAddress: string,\n  slippage: BigNumberish,\n  signer: Signer,\n  overrides: Overrides = {},\n): Promise<ContractTransaction> {\n  const signerAddress = await signer.getAddress();\n\n  return {\n    hash: \"0x00\",\n    from: signerAddress,\n    gasLimit: BigNumber.from(100),\n    data: \"0x\",\n    value: BigNumber.from(amount),\n    confirmations: 1,\n    chainId: 1,\n    nonce: 1,\n    wait: async () => Promise.resolve({} as unknown as ContractReceipt),\n  };\n}\n","import {\n  BigNumber,\n  BigNumberish,\n  ContractReceipt,\n  ContractTransaction,\n  Overrides,\n  Signer,\n} from \"ethers\";\n\n/**\n * withdraw liquidity before the term is expired to underlying and pts\n * @param amount\n * @param poolAddress\n * @param signer\n * @param overrides\n * @returns\n */\nexport async function withdrawLiquidity(\n  amount: BigNumberish,\n  poolAddress: string,\n  signer: Signer,\n  overrides: Overrides = {},\n): Promise<ContractTransaction> {\n  const signerAddress = await signer.getAddress();\n\n  return {\n    hash: \"0x00\",\n    from: signerAddress,\n    gasLimit: BigNumber.from(100),\n    data: \"0x\",\n    value: BigNumber.from(amount),\n    confirmations: 1,\n    chainId: 1,\n    nonce: 1,\n    wait: async () => Promise.resolve({} as unknown as ContractReceipt),\n  };\n}\n"],"names":[],"version":3,"file":"main.js.map"}
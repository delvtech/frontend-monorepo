{"mappings":"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","sources":["packages/core-v2-sdk/src/index.ts","packages/core-v2-sdk/src/context.ts","packages/core-v2-sdk/src/datasources/DataSource.ts","packages/core-v2-sdk/src/datasources/CachedDataSource.ts","packages/core-v2-sdk/src/datasources/ContractDataSource.ts","packages/core-v2-sdk/src/datasources/HTTPDataSource.ts","packages/core-v2-sdk/src/datasources/MultiPool/MultiPoolDataSource.ts","packages/core-v2-sdk/src/datasources/MultiPool/MultiPoolContractDataSource.ts","packages/core-v2-sdk/src/datasources/MultiTerm/MultiTermDataSource.ts","packages/core-v2-sdk/src/datasources/MultiTerm/MultiTermContractDataSource.ts","packages/core-v2-sdk/src/utils/token/isPT.ts","packages/core-v2-sdk/src/datasources/MultiTerm/ERC4626TermContractDataSource.ts","packages/core-v2-sdk/src/datasources/MultiTerm/CompoundV3TermContractDataSource.ts","packages/core-v2-sdk/src/datasources/Token/TokenDataSource.ts","packages/core-v2-sdk/src/datasources/Token/TokenContractDataSource.ts","packages/core-v2-sdk/src/datasources/TokenAPI/CoinGeckoAPIDataSource.ts","packages/core-v2-sdk/src/datasources/TokenAPI/TokenAPIDataSource.ts","packages/core-v2-sdk/src/datasources/YieldSource/YieldSourceDataSource.ts","packages/core-v2-sdk/src/datasources/YieldSource/UnknownYieldSourceDataSource.ts","packages/core-v2-sdk/src/datasources/YieldSource/ERC4626ContractDataSource.ts","packages/core-v2-sdk/src/models/LPToken.ts","packages/core-v2-sdk/src/models/MultiPool.ts","packages/core-v2-sdk/src/models/MultiTerm.ts","packages/core-v2-sdk/src/models/Token.ts","packages/core-v2-sdk/src/models/YieldSource.ts","packages/core-v2-sdk/src/models/Term.ts","packages/core-v2-sdk/src/utils/ethereum/getCurrentBlockNumber.ts","packages/core-v2-sdk/src/models/PrincipalToken.ts","packages/core-v2-sdk/src/models/YieldToken.ts","packages/core-v2-sdk/src/models/Pool.ts","packages/core-v2-sdk/src/utils/buyYieldTokens/buyYieldTokens.ts","packages/core-v2-sdk/src/utils/calcSwapCongergentCurvePool/calculateTradePrincipalTokens.ts","packages/core-v2-sdk/src/utils/calculateLPTokensOut/calculateLPTokensOut.ts","packages/core-v2-sdk/src/utils/provideLiquidity/provideLiquidity.ts","packages/core-v2-sdk/src/utils/redeemLiquidity/redeemLiquidity.ts","packages/core-v2-sdk/src/utils/tradePrincipalTokens/tradePrincipalTokens.ts","packages/core-v2-sdk/src/utils/withdrawLiquidity/withdrawLiquidity.ts"],"sourcesContent":["export * from \"./context\";\n\nexport * from \"./datasources/DataSource\";\nexport * from \"./datasources/CachedDataSource\";\nexport * from \"./datasources/ContractDataSource\";\nexport * from \"./datasources/HTTPDataSource\";\n\nexport * from \"./datasources/MultiPool/MultiPoolDataSource\";\nexport * from \"./datasources/MultiPool/MultiPoolContractDataSource\";\n\nexport * from \"./datasources/MultiTerm/MultiTermDataSource\";\nexport * from \"./datasources/MultiTerm/MultiTermContractDataSource\";\nexport * from \"./datasources/MultiTerm/ERC4626TermContractDataSource\";\nexport * from \"./datasources/MultiTerm/CompoundV3TermContractDataSource\";\n\nexport * from \"./datasources/Token/TokenDataSource\";\nexport * from \"./datasources/Token/TokenContractDataSource\";\n\nexport * from \"./datasources/TokenAPI/TokenAPIDataSource\";\nexport * from \"./datasources/TokenAPI/CoinGeckoAPIDataSource\";\n\nexport * from \"./datasources/YieldSource/YieldSourceDataSource\";\nexport * from \"./datasources/YieldSource/UnknownYieldSourceDataSource\";\nexport * from \"./datasources/YieldSource/ERC4626ContractDataSource\";\n\nexport * from \"./models/LPToken\";\nexport * from \"./models/MultiPool\";\nexport * from \"./models/MultiTerm\";\nexport * from \"./models/Pool\";\nexport * from \"./models/PrincipalToken\";\nexport * from \"./models/Term\";\nexport * from \"./models/Token\";\nexport * from \"./models/YieldSource\";\nexport * from \"./models/YieldToken\";\n\nexport * from \"./utils/buyYieldTokens/buyYieldTokens\";\nexport * from \"./utils/calcSwapCongergentCurvePool/calculateTradePrincipalTokens\";\nexport * from \"./utils/calculateLPTokensOut/calculateLPTokensOut\";\nexport * from \"./utils/provideLiquidity/provideLiquidity\";\nexport * from \"./utils/redeemLiquidity/redeemLiquidity\";\nexport * from \"./utils/tradePrincipalTokens/tradePrincipalTokens\";\nexport * from \"./utils/withdrawLiquidity/withdrawLiquidity\";\n","import { getDefaultProvider, providers } from \"ethers\";\nimport { DataSource } from \"./datasources/DataSource\";\n\nexport interface ElementContextOptions {\n  chainId: number;\n  provider?: providers.Provider;\n  dataSources?: Record<string, any>[];\n}\n\nexport class ElementContext {\n  chainId: number;\n  provider: providers.Provider;\n  dataSources: DataSource[];\n\n  constructor({ chainId, provider, dataSources = [] }: ElementContextOptions) {\n    this.chainId = chainId;\n    if (!provider) {\n      console.warn(\n        \"You are using the default provider, subject to rate limiting.\",\n      );\n    }\n    this.provider = provider ?? getDefaultProvider(chainId);\n    this.dataSources = dataSources;\n  }\n\n  // TODO: How can we make this more efficient, yet still flexible\n  getDataSource<T extends Record<string, any>>(filter: Partial<T>): T | null {\n    const dataSource = this.dataSources.find((dataSource) => {\n      let isMatch = true;\n      for (const [key, value] of Object.entries(filter)) {\n        if (!dataSource[key] !== value) {\n          isMatch = false;\n        }\n      }\n      return isMatch;\n    });\n    return (dataSource as T) ?? null;\n  }\n\n  registerDataSource<T extends Record<string, any>>(\n    filter: Partial<T>,\n    dataSource: T,\n  ): T {\n    const existing = this.getDataSource(filter);\n    if (existing) {\n      return existing;\n    }\n    this.dataSources.push(dataSource);\n    return dataSource;\n  }\n}\n","export interface DataSource extends Record<string, any> {}\n","import LRUCache from \"lru-cache\";\nimport { cached } from \"@elementfi/base\";\nimport { DataSource } from \"./DataSource\";\n\nexport class CachedDataSource implements DataSource {\n  cache: LRUCache<string, any>;\n\n  constructor(cache?: LRUCache<string, any>) {\n    this.cache = cache ?? new LRUCache({ max: 500 });\n  }\n\n  // The return type will match the return type of the callback function.\n  cached<T extends (...args: any) => any, TKey = any>(\n    // The cache key will be reduced to a string\n    cacheKey: TKey,\n    callback: T,\n  ): ReturnType<T> {\n    return cached({\n      cacheKey,\n      cache: this.cache,\n      callback,\n    });\n  }\n}\n","import { BaseContract } from \"ethers\";\nimport LRUCache from \"lru-cache\";\nimport { CachedDataSource } from \"./CachedDataSource\";\n\ntype AnyFunction = (...args: any) => any;\n\n/**\n * Get a union of all keys/properties on T that are functions\n */\nexport type FunctionKeys<T> = Exclude<\n  {\n    [K in keyof T]: T[K] extends AnyFunction ? K : never;\n  }[keyof T],\n  undefined\n>;\n\n// TODO: add a method for event queries\nexport class ContractDataSource<\n  T extends BaseContract,\n> extends CachedDataSource {\n  address: string;\n  contract: T;\n\n  constructor(contract: T, cache?: LRUCache<string, any>) {\n    super(cache);\n    this.address = contract.address;\n    this.contract = contract;\n  }\n\n  call<K extends FunctionKeys<T>>(\n    property: K,\n    args: T[K] extends AnyFunction ? Parameters<T[K]> : never,\n  ): T[K] extends AnyFunction ? ReturnType<T[K]> : never {\n    return this.cached([property, ...args], () => {\n      const contract = this.contract as T;\n      const fn = contract[property] as unknown as AnyFunction;\n      return fn(...args);\n    });\n  }\n}\n","import { CachedDataSource } from \"./CachedDataSource\";\n\nexport class HTTPDataSource<T = any> extends CachedDataSource {\n  baseURL: string;\n  defaultRequestOptions: RequestInit;\n  defaultGetOptions: RequestInit;\n  defaultPostOptions: RequestInit;\n  defaultPutOptions: RequestInit;\n  defaultDeleteOptions: RequestInit;\n  onResponse: (res: Response) => Promise<T>;\n\n  constructor(\n    baseURL: string,\n    options?: {\n      defaultRequestOptions?: RequestInit;\n      defaultGetOptions?: RequestInit;\n      defaultPostOptions?: RequestInit;\n      defaultPutOptions?: RequestInit;\n      defaultDeleteOptions?: RequestInit;\n      onResponse?: (res: Response) => Promise<T>;\n    },\n  ) {\n    super();\n    this.baseURL = baseURL;\n    this.defaultRequestOptions = options?.defaultRequestOptions ?? {};\n    this.defaultGetOptions = options?.defaultGetOptions ?? { method: \"GET\" };\n    this.defaultPostOptions = options?.defaultPostOptions ?? { method: \"POST\" };\n    this.defaultPutOptions = options?.defaultPutOptions ?? { method: \"PUT\" };\n    this.defaultDeleteOptions = options?.defaultDeleteOptions ?? {\n      method: \"DELETE\",\n    };\n    this.onResponse = options?.onResponse ?? ((res: Response) => res.json());\n  }\n\n  // Create\n  post<T>(path: string, options: RequestInit): Promise<T> {\n    return this.cached(\n      [\"post\", path, options.body],\n      () =>\n        fetch(`${this.baseURL}${path}`, {\n          ...this.defaultRequestOptions,\n          ...this.defaultPostOptions,\n          ...options,\n        }).then(this.onResponse) as Promise<T>,\n    );\n  }\n\n  // Read\n  get<T>(path: string, options: RequestInit = {}): Promise<T> {\n    return this.cached(\n      [\"get\", path],\n      () =>\n        fetch(`${this.baseURL}${path}`, {\n          ...this.defaultRequestOptions,\n          ...this.defaultGetOptions,\n          ...options,\n        }).then(this.onResponse) as Promise<T>,\n    );\n  }\n\n  // Update\n  put<T>(path: string, options: RequestInit): Promise<T> {\n    return this.cached(\n      [\"put\", path, options.body],\n      () =>\n        fetch(`${this.baseURL}${path}`, {\n          ...this.defaultRequestOptions,\n          ...this.defaultPutOptions,\n          ...options,\n        }).then(this.onResponse) as Promise<T>,\n    );\n  }\n\n  // Delete\n  delete<T>(path: string, options: RequestInit = {}): Promise<T> {\n    return this.cached(\n      [\"delete\", path],\n      () =>\n        fetch(`${this.baseURL}${path}`, {\n          ...this.defaultRequestOptions,\n          ...this.defaultDeleteOptions,\n          ...options,\n        }).then(this.onResponse) as Promise<T>,\n    );\n  }\n}\n","import { PoolParameters, PoolReserves } from \"src/types\";\n\nexport interface MultiPoolDataSource {\n  address: string;\n  getPoolIds: (fromBlock?: number, toBlock?: number) => Promise<number[]>;\n  getMultiTerm: () => Promise<string>;\n  getPoolReserves: (poolId: number) => Promise<PoolReserves>;\n  getPoolParameters: (poolId: number) => Promise<PoolParameters>;\n  getBaseAsset: () => Promise<string>;\n  getSymbol: (poolId: number) => Promise<string>;\n  getDecimals: () => Promise<number>;\n  getName: (poolId: number) => Promise<string>;\n  getBalanceOf: (poolId: number, address: string) => Promise<string>;\n}\n","import { providers } from \"ethers\";\nimport { Pool, Pool__factory } from \"@elementfi/core-v2-typechain\";\nimport { ContractDataSource } from \"src/datasources/ContractDataSource\";\nimport { MultiPoolDataSource } from \"./MultiPoolDataSource\";\nimport { PoolParameters, PoolReserves } from \"src/types\";\nimport { fromBn } from \"evm-bn\";\n\nexport class MultiPoolContractDataSource\n  extends ContractDataSource<Pool>\n  implements MultiPoolDataSource\n{\n  constructor(address: string, provider: providers.Provider) {\n    super(Pool__factory.connect(address, provider));\n  }\n\n  getPoolIds(fromBlock?: number, toBlock?: number): Promise<number[]> {\n    return this.cached([\"getPoolIds\", fromBlock, toBlock], async () => {\n      const eventFilter = this.contract.filters.PoolRegistered();\n      const events = await this.contract.queryFilter(\n        eventFilter,\n        fromBlock,\n        toBlock,\n      );\n      return events.map((event) => event.args.poolId.toNumber());\n    });\n  }\n\n  getMultiTerm(): Promise<string> {\n    return this.call(\"term\", []);\n  }\n\n  /**\n   * Fetches and caches the pool reserves from our datasource (contract).\n   * @notice This function returns reserves as string representation of a fixed point number.\n   * @param {number} poolId - the pool id (expiry)\n   * @return {Promise<PoolReserves>}\n   */\n  async getPoolReserves(poolId: number): Promise<PoolReserves> {\n    const [sharesBigNumber, bondsBigNumber] = await this.call(\"reserves\", [\n      poolId,\n    ]);\n    return {\n      shares: sharesBigNumber.toString(),\n      bonds: bondsBigNumber.toString(),\n    };\n  }\n\n  /**\n   * Fetches and caches the pool parameters from our datasource (contract).\n   * @notice This function also handles converting the pool parameters from a fixed point number.\n   * @param {number} poolId - the pool id (expiry)\n   * @return {Promise<PoolParameters>}\n   */\n  async getPoolParameters(poolId: number): Promise<PoolParameters> {\n    const [timeStretch, muBN] = await this.call(\"parameters\", [poolId]);\n\n    return {\n      // mu is represented as a 18 decimal fixed point number, we have to convert to a decimal\n      mu: fromBn(muBN, 18),\n      // timeStretch is represented as a 3 decimal fixed point number, we have to convert to a decimal\n      timeStretch: (timeStretch / 1e3).toString(),\n    };\n  }\n\n  /**\n   * Fetches the base asset address from our datasource (contract).\n   */\n  getBaseAsset(): Promise<string> {\n    return this.call(\"token\", []);\n  }\n\n  /**\n   * Fetches the symbol for a given poolId from our datasource (contract).\n   */\n  getSymbol(poolId: number): Promise<string> {\n    return this.call(\"symbol\", [poolId]);\n  }\n\n  /**\n   * Fetches the number of decimals used by tokens in our datasource (contract).\n   */\n  getDecimals(): Promise<number> {\n    return this.call(\"decimals\", []);\n  }\n\n  /**\n   * Fetches the name for a given poolId from our datasource (contract).\n   */\n  getName(poolId: number): Promise<string> {\n    return this.call(\"name\", [poolId]);\n  }\n\n  /**\n   * Fetches an address's balance of a given poolId from our datasource (contract).\n   */\n  async getBalanceOf(poolId: number, address: string): Promise<string> {\n    const balanceBigNumber = await this.call(\"balanceOf\", [poolId, address]);\n    return balanceBigNumber.toString();\n  }\n}\n","export interface MultiTermDataSource {\n  address: string;\n  getTermIds: (fromBlock?: number, toBlock?: number) => Promise<number[]>;\n  getCreatedAtBlock: (termId: number) => Promise<number | null>;\n  getYieldSource: () => Promise<string | null>;\n  getBaseAsset: () => Promise<string>;\n  getSymbol: (termId: number) => Promise<string>;\n  getDecimals: () => Promise<number>;\n  getName: (termId: number) => Promise<string>;\n  getBalanceOf: (termId: number, address: string) => Promise<string>;\n  getUnlockedPricePerShare: () => Promise<string>;\n  getTotalSupply: (termId: number) => Promise<string>;\n}\n","import { ethers, providers } from \"ethers\";\nimport { Term, Term__factory } from \"@elementfi/core-v2-typechain\";\nimport { TransferSingleEvent } from \"@elementfi/core-v2-typechain/dist/contracts/Term\";\nimport { MultiTermDataSource } from \"./MultiTermDataSource\";\nimport { ContractDataSource } from \"src/datasources/ContractDataSource\";\nimport { fromBn } from \"evm-bn\";\nimport { isPT } from \"src/utils/token/isPT\";\n\nexport class MultiTermContractDataSource\n  extends ContractDataSource<Term>\n  implements MultiTermDataSource\n{\n  constructor(address: string, provider: providers.Provider) {\n    super(Term__factory.connect(address, provider));\n  }\n\n  getTransferEvents(\n    from?: string | null,\n    to?: string | null,\n    fromBlock?: number,\n    toBlock?: number,\n  ): Promise<TransferSingleEvent[]> {\n    return this.cached(\n      [\"TransferSingle\", from, to, fromBlock, toBlock],\n      async () => {\n        const eventFilter = this.contract.filters.TransferSingle(\n          null,\n          from,\n          to,\n        );\n        return this.contract.queryFilter(eventFilter, fromBlock, toBlock);\n      },\n    );\n  }\n\n  /**\n   * Gets all terms that have been created from the datasource (contract).\n   * @param {number} fromBlock - Optional, start block number to search from.\n   * @param {number} toBlock - Optional, end block number to search to.\n   * @return {Promise<number[]>} A promise of an array of unique term ids.\n   */\n  async getTermIds(fromBlock?: number, toBlock?: number): Promise<number[]> {\n    return this.cached([\"getTermIds\", fromBlock, toBlock], async () => {\n      const events = await this.getTransferEvents(\n        // new mints result in a transfer from the zero address\n        ethers.constants.AddressZero,\n        null,\n        fromBlock,\n        toBlock,\n      );\n\n      return Array.from(\n        new Set(\n          events\n            // filter out YTs\n            .filter((event) => isPT(event.args.id))\n            .map((event) => event.args.id.toNumber()),\n        ),\n      );\n    });\n  }\n\n  getCreatedAtBlock(termId: number): Promise<number | null> {\n    return this.cached([\"getCreatedAtBlock\", termId], async () => {\n      const events = await this.getTransferEvents(\n        // new mints result in a transfer from the zero address\n        ethers.constants.AddressZero,\n        null,\n      );\n      const firstTransferEvent = events.find(({ args }) => args.id.eq(termId));\n      return firstTransferEvent?.blockNumber || null;\n    });\n  }\n\n  async getYieldSource(): Promise<null> {\n    // TODO: Replace with appropriate Term.sol yield source property once added\n    // console.warn('Idk how to do that')\n    return null;\n  }\n\n  getBaseAsset(): Promise<string> {\n    return this.call(\"token\", []);\n  }\n\n  getSymbol(termId: number): Promise<string> {\n    return this.call(\"symbol\", [termId]);\n  }\n\n  getDecimals(): Promise<number> {\n    return this.call(\"decimals\", []);\n  }\n\n  getName(termId: number): Promise<string> {\n    return this.call(\"name\", [termId]);\n  }\n\n  async getBalanceOf(termId: number, address: string): Promise<string> {\n    const balanceBigNumber = await this.call(\"balanceOf\", [termId, address]);\n    return balanceBigNumber.toString();\n  }\n\n  /**\n   * Fetches and caches the terms unlockedSharePrice value from our datasource (contract).\n   * @notice This function converts the sharePrice from a fixed point number.\n   * @param {number} termId - the term id (expiry)\n   * @return {Promise<string>} The unlocked share price as a string.\n   */\n  async getUnlockedPricePerShare(): Promise<string> {\n    const sharePriceBN = await this.call(\"unlockedSharePrice\", []);\n    return fromBn(sharePriceBN, await this.getDecimals());\n  }\n\n  /**\n   * Gets the total supply of a certain term.\n   * @param {number} termId - the term id (expiry)\n   * @return {Promise<string>} total supply represented as a string\n   */\n  async getTotalSupply(termId: number): Promise<string> {\n    const supply = await this.call(\"totalSupply\", [termId]);\n    return fromBn(supply, await this.getDecimals());\n  }\n}\n","import { BigNumber } from \"ethers\";\n\n/**\n * Determines whether or not the specified tokenId is a principle token.\n * @param {BigNumber} tokenId - token id\n * @return {boolean} whether or not is a principle token\n */\nexport function isPT(tokenId: BigNumber): boolean {\n  return !tokenId.toHexString().startsWith(\"0x8\");\n}\n","import { providers } from \"ethers\";\nimport {\n  ERC4626Term,\n  ERC4626Term__factory,\n} from \"@elementfi/core-v2-typechain\";\nimport { ContractDataSource } from \"src/datasources/ContractDataSource\";\nimport { MultiTermContractDataSource } from \"./MultiTermContractDataSource\";\n\nexport class ERC4626TermContractDataSource extends MultiTermContractDataSource {\n  contract: ERC4626Term;\n\n  constructor(address: string, provider: providers.Provider) {\n    super(address, provider);\n    this.contract = ERC4626Term__factory.connect(address, provider);\n  }\n\n  getYieldSourceAddress(\n    this: ContractDataSource<ERC4626Term>,\n  ): Promise<string> {\n    return this.call(\"vault\", []);\n  }\n}\n","import { providers } from \"ethers\";\nimport {\n  CompoundV3Term,\n  CompoundV3Term__factory,\n} from \"@elementfi/core-v2-typechain\";\nimport { ContractDataSource } from \"src/datasources/ContractDataSource\";\nimport { MultiTermContractDataSource } from \"./MultiTermContractDataSource\";\n\nexport class CompoundV3TermContractDataSource extends MultiTermContractDataSource {\n  contract: CompoundV3Term;\n\n  constructor(address: string, provider: providers.Provider) {\n    super(address, provider);\n    this.contract = CompoundV3Term__factory.connect(address, provider);\n  }\n\n  getYieldSourceAddress(\n    this: ContractDataSource<CompoundV3Term>,\n  ): Promise<string> {\n    return this.call(\"yieldSource\", []);\n  }\n}\n","export interface TokenDataSource {\n  address: string;\n  getSymbol: () => Promise<string>;\n  getDecimals: () => Promise<number>;\n  getName: () => Promise<string>;\n  getPrice: (currency: string) => Promise<number | null>;\n  getAllowance: (owner: string, spender: string) => Promise<string>;\n  getBalanceOf: (address: string) => Promise<string>;\n}\n","import { providers } from \"ethers\";\nimport { ERC20, ERC20__factory } from \"@elementfi/core-v2-typechain\";\nimport { ContractDataSource } from \"src/datasources/ContractDataSource\";\nimport { TokenAPIDataSource } from \"src/datasources/TokenAPI/TokenAPIDataSource\";\nimport { CoinGeckoAPIDataSource } from \"src/datasources/TokenAPI/CoinGeckoAPIDataSource\";\nimport { TokenDataSource } from \"./TokenDataSource\";\n\nexport class TokenContractDataSource implements TokenDataSource {\n  address: string;\n  apiDataSource: TokenAPIDataSource;\n  erc20DataSource: ContractDataSource<ERC20>;\n\n  constructor(\n    address: string,\n    provider: providers.Provider,\n    options?: {\n      apiDataSource?: TokenAPIDataSource;\n      erc20DataSource?: ContractDataSource<ERC20>;\n    },\n  ) {\n    this.address = address;\n    this.apiDataSource = options?.apiDataSource ?? new CoinGeckoAPIDataSource();\n    this.erc20DataSource =\n      options?.erc20DataSource ??\n      new ContractDataSource(ERC20__factory.connect(address, provider));\n  }\n\n  getSymbol(): Promise<string> {\n    return this.erc20DataSource.call(\"symbol\", []);\n  }\n\n  getDecimals(): Promise<number> {\n    return this.erc20DataSource.call(\"decimals\", []);\n  }\n\n  getName(): Promise<string> {\n    return this.erc20DataSource.call(\"name\", []);\n  }\n\n  async getPrice(currency: string): Promise<number | null> {\n    // TODO: find a more reliable way to get the id\n    const id = (await this.getName()).toLowerCase();\n    return this.apiDataSource.getTokenPrice(id, currency);\n  }\n\n  async getAllowance(owner: string, spender: string): Promise<string> {\n    const balanceBigNumber = await this.erc20DataSource.call(\"allowance\", [\n      owner,\n      spender,\n    ]);\n    return balanceBigNumber.toString();\n  }\n\n  async getBalanceOf(address: string): Promise<string> {\n    const balanceBigNumber = await this.erc20DataSource.call(\"balanceOf\", [\n      address,\n    ]);\n    return balanceBigNumber.toString();\n  }\n}\n","import { HTTPDataSource } from \"src/datasources/HTTPDataSource\";\n\nexport class CoinGeckoAPIDataSource extends HTTPDataSource {\n  static baseURL: \"https://api.coingecko.com/api/v3/\";\n\n  constructor() {\n    super(\"https://api.coingecko.com/api/v3/\");\n  }\n\n  // TODO: Add strong types for CODE and possibly ID\n  async getTokenPrice<ID extends string, CODE extends string>(\n    id: ID,\n    currency: CODE,\n  ): Promise<number | null> {\n    const res = await this.get<Record<ID, Record<CODE, number>>>(\n      `/simple/price?ids=${id}&vs_currencies=${currency ?? \"usd\"}`,\n    );\n    return res[id]?.[currency] ?? null;\n  }\n}\n","export interface TokenAPIDataSource {\n  getTokenPrice: (id: string, currency: string) => Promise<number | null>;\n}\n","export interface YieldSourceDataSource {\n  address: string;\n  getName: () => Promise<string>;\n}\n","import { YieldSourceDataSource } from \"./YieldSourceDataSource\";\nimport { CachedDataSource } from \"src/datasources/CachedDataSource\";\n\nexport class UnknownYieldSourceDataSource\n  extends CachedDataSource\n  implements YieldSourceDataSource\n{\n  address: string;\n\n  constructor(address: string) {\n    super();\n    this.address = address;\n  }\n\n  async getName(): Promise<string> {\n    return this.cached(\"getName\", async () => \"Unnamed YieldSource\");\n  }\n}\n","import { providers } from \"ethers\";\nimport { ERC4626, ERC4626__factory } from \"@elementfi/core-v2-typechain\";\nimport { ContractDataSource } from \"src/datasources/ContractDataSource\";\nimport { YieldSourceDataSource } from \"./YieldSourceDataSource\";\n\nexport class ERC4626ContractDataSource\n  extends ContractDataSource<ERC4626>\n  implements YieldSourceDataSource\n{\n  constructor(address: string, provider: providers.Provider) {\n    super(ERC4626__factory.connect(address, provider));\n  }\n\n  async getName(): Promise<string> {\n    return this.call(\"name\", []);\n  }\n}\n","import { ElementContext } from \"src/context\";\nimport { Pool } from \"./Pool\";\nimport { Token } from \"./Token\";\n\nexport class LPToken {\n  id: number;\n  context: ElementContext;\n  pool: Pool;\n  maturityDate: Date;\n\n  constructor(id: number, context: ElementContext, pool: Pool) {\n    this.id = id;\n    this.context = context;\n    this.pool = pool;\n    this.maturityDate = new Date(id * 1000);\n  }\n\n  async getBaseAsset(): Promise<Token> {\n    return this.pool.getBaseAsset();\n  }\n\n  async getSymbol(): Promise<string> {\n    return this.pool.multiPool.dataSource.getSymbol(this.id);\n  }\n\n  async getDecimals(): Promise<number> {\n    return this.pool.multiPool.getDecimals();\n  }\n\n  async getName(): Promise<string> {\n    return this.pool.multiPool.dataSource.getName(this.id);\n  }\n\n  async getBalanceOf(address: string): Promise<string> {\n    return this.pool.multiPool.dataSource.getBalanceOf(this.id, address);\n  }\n}\n","import { ElementContext } from \"src/context\";\nimport { MultiPoolContractDataSource } from \"src/datasources/MultiPool/MultiPoolContractDataSource\";\nimport { MultiPoolDataSource } from \"src/datasources/MultiPool/MultiPoolDataSource\";\nimport { PoolParameters, PoolReserves } from \"src/types\";\nimport { MultiTerm } from \"./MultiTerm\";\nimport { Pool } from \"./Pool\";\nimport { Token } from \"./Token\";\nimport { YieldSource } from \"./YieldSource\";\n\n/**\n * MultiPool model class.\n * @class\n */\nexport class MultiPool {\n  address: string;\n  context: ElementContext;\n  dataSource: MultiPoolDataSource;\n\n  /**\n   * Create a MultiPool model.\n   * @param {string} address - MultiPool contract address\n   * @param {ElementContext} context - Context object for the sdk.\n   * @param {MultiPoolDataSource} dataSource - Optional custom datasource for this model. Defaults to {@link MultiPoolContractDataSource}\n   */\n  constructor(\n    address: string,\n    context: ElementContext,\n    dataSource?: MultiPoolDataSource,\n  ) {\n    this.address = address;\n    this.context = context;\n    this.dataSource =\n      dataSource ??\n      context.registerDataSource(\n        { address },\n        new MultiPoolContractDataSource(address, context.provider),\n      );\n  }\n\n  /**\n   * Gets a Pool by the poolId from this MultiPool.\n   * @async\n   * @param {number} poolId - the poolId\n   * @return {Pool | null} A pool model, returns null if pool does not exist.\n   */\n  async getPool(poolId: number): Promise<Pool | null> {\n    // TODO: should this validate that the pool exists?\n    return new Pool(poolId, this.context, this);\n  }\n\n  /**\n   * Gets all the Pools from this MultiPool. Searches by PoolRegisteredEvents.\n   * @async\n   * @param {number} fromBlock - Optional, start block number to search from.\n   * @param {number} toBlock - Optional, end block number to search to.\n   * @return {Promise<Pool[]>}\n   */\n  async getPools(fromBlock?: number, toBlock?: number): Promise<Pool[]> {\n    const poolIds = await this.dataSource.getPoolIds(\n      fromBlock,\n      toBlock ?? (await this.context.provider.getBlockNumber()),\n    );\n    return poolIds.map((id) => new Pool(id, this.context, this));\n  }\n\n  /**\n   * Gets the associated MultiTerm model.\n   * @async\n   * @return {Promise<MultiTerm>}\n   */\n  async getMultiTerm(): Promise<MultiTerm> {\n    const address = await this.dataSource.getMultiTerm();\n    return new MultiTerm(address, this.context);\n  }\n\n  /**\n   * Gets the yield source the associated MultiTerm contract deposits into.\n   * @async\n   * @function getYieldSource\n   * @return {Promise<YieldSource | null>}\n   */\n  async getYieldSource(): Promise<YieldSource | null> {\n    const multiTerm = await this.getMultiTerm();\n    return multiTerm.getYieldSource();\n  }\n\n  /**\n   * Gets the base asset from the associated MultiTerm contract.\n   * @async\n   * @function getBaseAsset\n   * @return {Promise<Token>} ERC20 token.\n   */\n  async getBaseAsset(): Promise<Token> {\n    const multiTerm = await this.getMultiTerm();\n    return multiTerm.getBaseAsset();\n  }\n\n  /**\n   * Gets the number of decimals used by this Multi Pool\n   */\n  getDecimals(): Promise<number> {\n    return this.dataSource.getDecimals();\n  }\n\n  /**\n   * Gets the pool reserves\n   * @async\n   * @param {number} poolId - the pool id\n   * @return {Promise<PoolReserves>} pool reserves.\n   */\n  async getPoolReserves(poolId: number): Promise<PoolReserves> {\n    return await this.dataSource.getPoolReserves(poolId);\n  }\n\n  /**\n   * Gets the pool parameters\n   * @param {number} poolId - the pool id\n   * @return {Promise<PoolParameters>} pool parameters.\n   */\n  async getPoolParameters(poolId: number): Promise<PoolParameters> {\n    return await this.dataSource.getPoolParameters(poolId);\n  }\n}\n","import { ElementContext } from \"src/context\";\nimport { MultiTermDataSource } from \"src/datasources/MultiTerm/MultiTermDataSource\";\nimport { MultiTermContractDataSource } from \"src/datasources/MultiTerm/MultiTermContractDataSource\";\nimport { Token } from \"./Token\";\nimport { YieldSource } from \"./YieldSource\";\nimport { Term } from \"./Term\";\nimport { BigNumber } from \"bignumber.js\";\n\n/**\n * MultiTerm model class.\n * @class\n */\nexport class MultiTerm {\n  address: string;\n  context: ElementContext;\n  dataSource: MultiTermDataSource;\n\n  constructor(\n    address: string,\n    context: ElementContext,\n    dataSource?: MultiTermDataSource,\n  ) {\n    this.address = address;\n    this.context = context;\n    this.dataSource =\n      dataSource ??\n      context.registerDataSource(\n        { address },\n        new MultiTermContractDataSource(address, context.provider),\n      );\n  }\n\n  /**\n   * Gets a Term by the termId from this MultiTerm.\n   * @async\n   * @param {number} termId - the termId\n   * @return {Promise<Term>}\n   */\n  async getTerm(termId: number): Promise<Term> {\n    return new Term(termId, this.context, this);\n  }\n\n  /**\n   * Gets all the Terms from this MultiTerm. Searches by TransferSingleEvents.\n   * @async\n   * @param {number} fromBlock - Optional, start block number to search from.\n   * @param {number} toBlock - Optional, end block number to search to.\n   * @return {Promise<Term[]>}\n   */\n  async getTerms(fromBlock?: number, toBlock?: number): Promise<Term[]> {\n    const termIds = await this.dataSource.getTermIds(\n      fromBlock,\n      toBlock ?? (await this.context.provider.getBlockNumber()),\n    );\n    return termIds.map((id) => new Term(id, this.context, this));\n  }\n\n  /**\n   * Gets the yield source this MultiTerm deposits into.\n   * @async\n   * @function getYieldSource\n   * @return {Promise<YieldSource | null>}\n   */\n  async getYieldSource(): Promise<YieldSource | null> {\n    const address = await this.dataSource.getYieldSource();\n    if (!address) {\n      return null;\n    }\n    return new YieldSource(address, this.context);\n  }\n\n  /**\n   * Gets the base asset as a Token model.\n   * @async\n   * @function getBaseAsset\n   * @return {Promise<Token>} ERC20 token.\n   */\n  async getBaseAsset(): Promise<Token> {\n    const address = await this.dataSource.getBaseAsset();\n    return new Token(address, this.context);\n  }\n\n  /**\n   * Gets the number of decimals used by this MultiTerm.\n   * @async\n   * @return {Promise<number>} The number of decimals.\n   */\n  getDecimals(): Promise<number> {\n    return this.dataSource.getDecimals();\n  }\n\n  /**\n   * Gets the TVL for the MultiTerm contract, the sum of all term TVLs.\n   * @async\n   * @return {Promise<string>} TVL represented as a string in terms of underlying.\n   */\n  async getTVL(): Promise<string> {\n    const terms = await this.getTerms();\n\n    let tvl: BigNumber = new BigNumber(0);\n    for (const term of terms) {\n      tvl = tvl.plus(await term.getTVL());\n    }\n\n    return tvl.toString();\n  }\n\n  /**\n   * Gets the MultiTerm's unlockedSharePrice value\n   * @async\n   * @return {Promise<string>} The unlocked share price as a string.\n   */\n  async getUnlockedPricePerShare(): Promise<string> {\n    return await this.dataSource.getUnlockedPricePerShare();\n  }\n}\n","import { ElementContext } from \"src/context\";\nimport { TokenContractDataSource } from \"src/datasources/Token/TokenContractDataSource\";\nimport { TokenDataSource } from \"src/datasources/Token/TokenDataSource\";\nimport { CoinGeckoAPIDataSource } from \"src/datasources/TokenAPI/CoinGeckoAPIDataSource\";\n\nexport class Token {\n  address: string;\n  context: ElementContext;\n  dataSource: TokenDataSource;\n\n  constructor(\n    address: string,\n    context: ElementContext,\n    dataSource?: TokenDataSource,\n  ) {\n    this.address = address;\n    this.context = context;\n    if (dataSource) {\n      this.dataSource = dataSource;\n    } else {\n      const tokenAPIDataSource = context.registerDataSource(\n        { baseURL: CoinGeckoAPIDataSource.baseURL },\n        new CoinGeckoAPIDataSource(),\n      );\n      this.dataSource = context.registerDataSource(\n        { address },\n        new TokenContractDataSource(address, context.provider, {\n          apiDataSource: tokenAPIDataSource,\n        }),\n      );\n    }\n  }\n\n  getSymbol(): Promise<string> {\n    return this.dataSource.getSymbol();\n  }\n\n  getDecimals(): Promise<number> {\n    return this.dataSource.getDecimals();\n  }\n\n  getName(): Promise<string> {\n    return this.dataSource.getName();\n  }\n\n  getPrice(currency: string): Promise<number | null> {\n    return this.dataSource.getPrice(currency);\n  }\n\n  getAllowance(owner: string, spender: string): Promise<string> {\n    return this.dataSource.getAllowance(owner, spender);\n  }\n\n  getBalanceOf(address: string): Promise<string> {\n    return this.dataSource.getBalanceOf(address);\n  }\n}\n","import { ElementContext } from \"src/context\";\nimport { YieldSourceDataSource } from \"src/datasources/YieldSource/YieldSourceDataSource\";\nimport { UnknownYieldSourceDataSource } from \"src/datasources/YieldSource/UnknownYieldSourceDataSource\";\n\nexport class YieldSource {\n  address: string;\n  context: ElementContext;\n  dataSource: YieldSourceDataSource;\n\n  constructor(\n    address: string,\n    context: ElementContext,\n    dataSource?: YieldSourceDataSource,\n  ) {\n    this.address = address;\n    this.context = context;\n    this.dataSource =\n      dataSource ??\n      context.registerDataSource(\n        { address },\n        new UnknownYieldSourceDataSource(address),\n      );\n  }\n\n  getName(): Promise<string> {\n    return this.dataSource.getName();\n  }\n}\n","import { ElementContext } from \"src/context\";\nimport { getCurrentBlockTimestamp } from \"src/utils/ethereum/getCurrentBlockNumber\";\nimport { MultiTerm } from \"./MultiTerm\";\nimport { PrincipalToken } from \"./PrincipalToken\";\nimport { Token } from \"./Token\";\nimport { YieldSource } from \"./YieldSource\";\nimport { YieldToken } from \"./YieldToken\";\n\nexport class Term {\n  id: number;\n  context: ElementContext;\n  multiTerm: MultiTerm;\n  principalToken: PrincipalToken;\n  maturityDate: Date;\n\n  constructor(id: number, context: ElementContext, multiTerm: MultiTerm) {\n    this.id = id;\n    this.context = context;\n    this.multiTerm = multiTerm;\n    this.principalToken = new PrincipalToken(id, context, this);\n    this.maturityDate = new Date(id * 1000);\n  }\n\n  getYieldSource(): Promise<YieldSource | null> {\n    return this.multiTerm.getYieldSource();\n  }\n\n  getBaseAsset(): Promise<Token> {\n    return this.multiTerm.getBaseAsset();\n  }\n\n  /**\n   * Gets the TVL of this term, in terms of the underlying token\n   * @todo Does not account for accrued interest, need access to _underlying(ShareState.locked)\n   * @param {number} termId - the term id (expiry)\n   * @return {Promise<string>} total supply represented as a string as a decimal number\n   */\n  getTVL(): Promise<string> {\n    const balance = this.multiTerm.dataSource.getTotalSupply(this.id);\n    return balance;\n  }\n\n  getCreatedAtBlock(): Promise<number | null> {\n    return this.multiTerm.dataSource.getCreatedAtBlock(this.id);\n  }\n\n  // TODO: How do I get the token ID with a start and end date?\n  getYieldToken(startTimeStamp: number): YieldToken {\n    return new YieldToken(this.id, this.context, this);\n  }\n\n  /**\n   * Gets the time remaining of the term in seconds. If expired, returns zero.\n   * @async\n   * @return {Promise<number>} time remaining in seconds\n   */\n  async getSecondsUntilExpiry(): Promise<number> {\n    const currentBlockTimestamp = await getCurrentBlockTimestamp(\n      this.context.provider,\n    );\n    const secondsRemaining = this.id - currentBlockTimestamp;\n    return secondsRemaining < 0 ? 0 : secondsRemaining;\n  }\n\n  /**\n   * Gets the time remaining of the term in days. If expired, returns zero.\n   * @async\n   * @return {Promise<number>} time remaining in days\n   */\n  async getDaysUntilExpiry(): Promise<number> {\n    const secondsUntilExpiry = await this.getSecondsUntilExpiry();\n    return secondsUntilExpiry / 86400;\n  }\n}\n","import { Provider } from \"@ethersproject/providers\";\n\n/**\n * Gets the current block's timestamp on-chain from the provider\n * @return {Promise<string>} Current block timestamps in seconds\n */\nexport async function getCurrentBlockTimestamp(\n  provider: Provider,\n): Promise<number> {\n  const current = await provider.getBlockNumber();\n  const currentBlock = await provider.getBlock(current);\n\n  return currentBlock.timestamp;\n}\n","import { ElementContext } from \"src/context\";\nimport { Term } from \"./Term\";\nimport { Token } from \"./Token\";\n\nexport class PrincipalToken {\n  id: number;\n  context: ElementContext;\n  term: Term;\n  maturityDate: Date;\n\n  constructor(id: number, context: ElementContext, term: Term) {\n    this.id = id;\n    this.context = context;\n    this.term = term;\n    this.maturityDate = new Date(id * 1000);\n  }\n\n  async getBaseAsset(): Promise<Token> {\n    return this.term.getBaseAsset();\n  }\n\n  async getSymbol(): Promise<string> {\n    return this.term.multiTerm.dataSource.getSymbol(this.id);\n  }\n\n  async getDecimals(): Promise<number> {\n    return this.term.multiTerm.getDecimals();\n  }\n\n  async getName(): Promise<string> {\n    return this.term.multiTerm.dataSource.getName(this.id);\n  }\n\n  async getBalanceOf(address: string): Promise<string> {\n    return this.term.multiTerm.dataSource.getBalanceOf(this.id, address);\n  }\n}\n","import { ElementContext } from \"src/context\";\nimport { Term } from \"./Term\";\nimport { Token } from \"./Token\";\n\nexport class YieldToken {\n  id: number;\n  context: ElementContext;\n  term: Term;\n  maturityDate: Date;\n\n  constructor(id: number, context: ElementContext, term: Term) {\n    this.id = id;\n    this.context = context;\n    this.term = term;\n    this.maturityDate = new Date(id * 1000);\n  }\n\n  async getBaseAsset(): Promise<Token> {\n    return this.term.getBaseAsset();\n  }\n\n  async getSymbol(): Promise<string> {\n    return this.term.multiTerm.dataSource.getSymbol(this.id);\n  }\n\n  async getDecimals(): Promise<number> {\n    return this.term.multiTerm.dataSource.getDecimals();\n  }\n\n  async getName(): Promise<string> {\n    return this.term.multiTerm.dataSource.getName(this.id);\n  }\n\n  async getBalanceOf(address: string): Promise<string> {\n    return this.term.multiTerm.dataSource.getBalanceOf(this.id, address);\n  }\n\n  // TODO:\n  async getAccruedInterest(): Promise<string> {\n    return \"0\";\n  }\n}\n","import BigNumber from \"bignumber.js\";\nimport { ElementContext } from \"src/context\";\nimport { PoolParameters, PoolReserves } from \"src/types\";\nimport { getCurrentBlockTimestamp } from \"src/utils/ethereum/getCurrentBlockNumber\";\nimport { LPToken } from \"./LPToken\";\nimport { MultiPool } from \"./MultiPool\";\nimport { MultiTerm } from \"./MultiTerm\";\nimport { Term } from \"./Term\";\nimport { Token } from \"./Token\";\nimport { YieldSource } from \"./YieldSource\";\n\n/**\n * Pool model class.\n */\nexport class Pool {\n  id: number;\n  context: ElementContext;\n  multiPool: MultiPool;\n  lpToken: LPToken;\n  maturityDate: Date;\n\n  /**\n   * Creates a Pool model.\n   * @param {number} id - the pool id (expiry)\n   * @param {ElementContext} context - Context object for the sdk.\n   * @param {MultiPool} multiPool - the MultiPool model where this pool is stored.\n   */\n  constructor(id: number, context: ElementContext, multiPool: MultiPool) {\n    this.id = id;\n    this.context = context;\n    this.multiPool = multiPool;\n    this.lpToken = new LPToken(id, context, this);\n    this.maturityDate = new Date(id * 1000);\n  }\n\n  /**\n   * @async\n   * Gets the associated MultiTerm model for this pool.\n   * @return {Promise<YieldSource | null>}\n   */\n  getMultTerm(): Promise<MultiTerm> {\n    return this.multiPool.getMultiTerm();\n  }\n\n  /**\n   * @async\n   * Gets the associated Term model for this pool.\n   * @return {Promise<YieldSource | null>}\n   */\n  async getTerm(): Promise<Term | null> {\n    const multiTerm = await this.multiPool.getMultiTerm();\n    return multiTerm.getTerm(this.id);\n  }\n\n  /**\n   * @async\n   * Gets yield source for this pool.\n   * @return {Promise<YieldSource | null>}\n   */\n  getYieldSource(): Promise<YieldSource | null> {\n    return this.multiPool.getYieldSource();\n  }\n\n  /**\n   * @async\n   * Gets the base asset for this pool.\n   * @return {Promise<Token>}\n   */\n  getBaseAsset(): Promise<Token> {\n    return this.multiPool.getBaseAsset();\n  }\n\n  /**\n   * @async\n   * Gets the bond and shares reserves for the pool.\n   * @return {Promise<PoolReserves>}\n   */\n  async getReserves(): Promise<PoolReserves> {\n    return await this.multiPool.getPoolReserves(this.id);\n  }\n\n  /**\n   * @async\n   * Gets the bond reserves total from the pool.\n   * @return {Promise<string>} Bond reserves as a string.\n   */\n  async getBondReserves(): Promise<string> {\n    const { bonds } = await this.getReserves();\n    return bonds;\n  }\n\n  /**\n   * @async\n   * Gets the share reserves total from the pool.\n   * @return {Promise<string>} Share reserves as a string.\n   */\n  async getShareReserves(): Promise<string> {\n    const { shares } = await this.getReserves();\n    return shares;\n  }\n\n  /**\n   * Gets the share asset of this pool.\n   * @async\n   * @return {Promise<Token | null>}\n   */\n  async getShareAsset(): Promise<Token | null> {\n    const yieldSource = await this.getYieldSource();\n    if (!yieldSource) {\n      return null;\n    }\n    return new Token(yieldSource.address, this.context);\n  }\n\n  /**\n   * @async\n   * Gets the pool parameters, timeStretch and mu (initial price per share).\n   * @return {Promise<PoolParameters>}\n   */\n  async getParameters(): Promise<PoolParameters> {\n    return await this.multiPool.getPoolParameters(this.id);\n  }\n\n  /**\n   * Gets principal token spot price from the pool, disregarding slippage, denominated in the base asset.\n   * @see {@link https://github.com/element-fi/analysis/blob/83ca31c690caa168274ef5d8cd807d040d9b9f59/scripts/PricingModels2.py#L500} for formula source.\n   * @return {Promise<string>} Principle token spot price, denoted in base asset.\n   */\n  async getSpotPrice(): Promise<string> {\n    // fetch reserves\n    const reserves = await this.getReserves();\n\n    // cast to number\n    const bonds = +reserves.bonds;\n    const shares = +reserves.shares;\n    const totalSupply = bonds + shares;\n    const daysUntilExpiry = await this.getDaysUntilExpiry();\n\n    // pool parameters\n    const parameters = await this.getParameters();\n    const mu = +parameters.mu;\n    const timeStretch = +parameters.timeStretch;\n\n    // price per share\n    const term = await this.multiPool.getMultiTerm();\n    const pricePerShare = +(await term.getUnlockedPricePerShare());\n    const tParam = daysUntilExpiry / (365 * timeStretch);\n\n    const denom =\n      (((bonds + totalSupply) * pricePerShare) / (shares * mu)) ** tParam;\n    return (1 / denom).toString();\n  }\n\n  /**\n   * Gets the TVL for this pool, denominated in the base asset.\n   * @async\n   * @return {Promise<string>} tvl represented as a string.\n   */\n  async getTVL(): Promise<string> {\n    // bond price in terms of underlying\n    const bondPrice = await this.getSpotPrice();\n    const sharePrice = await (\n      await this.multiPool.getMultiTerm()\n    ).getUnlockedPricePerShare();\n    const { bonds, shares } = await this.getReserves();\n    const tvl = +bondPrice * +bonds + +shares * +sharePrice;\n    return tvl.toString();\n  }\n\n  /**\n   * Gets the time remaining of the term in seconds. If expired, returns zero.\n   * @async\n   * @return {Promise<number>} time remaining in seconds\n   */\n  async getSecondsUntilExpiry(): Promise<number> {\n    const currentBlockTimestamp = await getCurrentBlockTimestamp(\n      this.context.provider,\n    );\n    const secondsRemaining = this.id - currentBlockTimestamp;\n    return secondsRemaining < 0 ? 0 : secondsRemaining;\n  }\n\n  /**\n   * Gets the time remaining of the term in days. If expired, returns zero.\n   * @async\n   * @return {Promise<number>} time remaining in days\n   */\n  async getDaysUntilExpiry(): Promise<number> {\n    const secondsUntilExpiry = await this.getSecondsUntilExpiry();\n    return secondsUntilExpiry / 86400;\n  }\n\n  /**\n   * Calculates the Fixed APR of the principal token in this pool.\n   * @async\n   * @see {@link https://github.com/element-fi/analysis/blob/83ca31c690caa168274ef5d8cd807d040d9b9f59/scripts/PricingModels2.py#L487} for formula source.\n   * @return {Promise<string>} Fixed APR represented as a string, not rounded.\n   */\n  async getFixedAPR(): Promise<string> {\n    const spotPrice = +(await this.getSpotPrice());\n    const poolParams = await this.getParameters();\n    const timeStretch = +poolParams.timeStretch;\n    const daysUntilExpiry = (await this.getDaysUntilExpiry()) * timeStretch;\n    const daysFractionOfYear = daysUntilExpiry / 365;\n    const oneMinusSpotPrice = 1 - spotPrice;\n    const apr = (oneMinusSpotPrice / spotPrice / daysFractionOfYear) * 100;\n    return apr.toString();\n  }\n}\n","import {\n  BigNumber,\n  BigNumberish,\n  ContractReceipt,\n  ContractTransaction,\n  Overrides,\n  Signer,\n} from \"ethers\";\n\n/**\n * A method to buy yield tokens.  Unclear at this point if this is simply performing the internal flashloan to perform a YTC.\n * @param tokenAddress\n * @param vaultAddress\n * @param amount\n * @param signer\n * @param overrides\n * @returns\n */\nexport async function buyYieldTokens(\n  tokenAddress: string,\n  vaultAddress: string,\n  amount: BigNumberish,\n  signer: Signer,\n  overrides: Overrides = {},\n): Promise<ContractTransaction> {\n  const signerAddress = await signer.getAddress();\n\n  return {\n    hash: \"0x00\",\n    from: signerAddress,\n    gasLimit: BigNumber.from(100),\n    data: \"0x\",\n    value: BigNumber.from(amount),\n    confirmations: 1,\n    chainId: 1,\n    nonce: 1,\n    wait: async () => Promise.resolve({} as unknown as ContractReceipt),\n  };\n}\n","import {\n  BigNumber,\n  BigNumberish,\n  ContractReceipt,\n  ContractTransaction,\n  Overrides,\n  Signer,\n} from \"ethers\";\n\n/**\n * calculates a trade of prinicipal tokens\n * this is likely to get a lot more complicated with swap kinds, exact in, exact out etc\n * @param tokenAmountsIn\n * @param tokenReserves\n * @returns\n */\nexport function calcSwapConvergentCurvePool(\n  tokenAmountsIn: BigNumberish[],\n  tokenReserves: BigNumberish[],\n): string {\n  return \"1\";\n}\n","import { BigNumberish } from \"ethers\";\n\n/**\n * calculates an amount of LP tokens out for an amount of asset provided.  could be single sided or double sided.\n * this one is likely to get a lot more complicated.  there could be join kinds like exact amount in, exact amount out etc.\n * @param tokenAmountsIn\n * @param tokenReserves\n * @returns\n */\nexport function calculateLPTokensOut(\n  tokenAmountsIn: BigNumberish[],\n  tokenReserves: BigNumberish[],\n): string {\n  return \"1\";\n}\n","import {\n  BigNumber,\n  BigNumberish,\n  ContractReceipt,\n  ContractTransaction,\n  Overrides,\n  Signer,\n} from \"ethers\";\n\n/**\n * A function to provide liquidity to a v2 term\n * @param tokensInAddresses\n * @param amounts\n * @param vaultAddress\n * @param slippage\n * @param signer\n * @param overrides\n * @returns\n */\nexport async function provideLiquidity(\n  amounts: BigNumberish[],\n  tokensInAddresses: string[],\n  vaultAddress: string,\n  slippage: BigNumberish,\n  signer: Signer,\n  overrides: Overrides = {},\n): Promise<ContractTransaction> {\n  const signerAddress = await signer.getAddress();\n\n  return {\n    hash: \"0x00\",\n    from: signerAddress,\n    gasLimit: BigNumber.from(100),\n    data: \"0x\",\n    value: BigNumber.from(amounts[0]),\n    confirmations: 1,\n    chainId: 1,\n    nonce: 1,\n    wait: async () => Promise.resolve({} as unknown as ContractReceipt),\n  };\n}\n","import {\n  BigNumber,\n  BigNumberish,\n  ContractReceipt,\n  ContractTransaction,\n  Overrides,\n  Signer,\n} from \"ethers\";\n\n/**\n * redeem liquidity after the term is mature to the underlying\n * @param amount\n * @param poolAddress\n * @param signer\n * @param overrides\n * @returns\n */\nexport async function redeemLiquidity(\n  amount: BigNumberish,\n  poolAddress: string,\n  signer: Signer,\n  overrides: Overrides = {},\n): Promise<ContractTransaction> {\n  const signerAddress = await signer.getAddress();\n\n  return {\n    hash: \"0x00\",\n    from: signerAddress,\n    gasLimit: BigNumber.from(100),\n    data: \"0x\",\n    value: BigNumber.from(amount),\n    confirmations: 1,\n    chainId: 1,\n    nonce: 1,\n    wait: async () => Promise.resolve({} as unknown as ContractReceipt),\n  };\n}\n","import {\n  BigNumber,\n  BigNumberish,\n  ContractReceipt,\n  ContractTransaction,\n  Overrides,\n  Signer,\n} from \"ethers\";\n\n/**\n * performs a trade of principal tokens on a v2 pool\n * this is likely to get a lot more complicated with swap kinds, exact in, exact out etc\n * @param tokenInAddress\n * @param tokenOutAddress\n * @param vaultAddress\n * @param amount\n * @param slippage\n * @param signer\n * @param overrides\n * @returns\n */\nexport async function tradePrincipalTokens(\n  amount: BigNumberish,\n  tokenInAddress: string,\n  tokenOutAddress: string,\n  vaultAddress: string,\n  slippage: BigNumberish,\n  signer: Signer,\n  overrides: Overrides = {},\n): Promise<ContractTransaction> {\n  const signerAddress = await signer.getAddress();\n\n  return {\n    hash: \"0x00\",\n    from: signerAddress,\n    gasLimit: BigNumber.from(100),\n    data: \"0x\",\n    value: BigNumber.from(amount),\n    confirmations: 1,\n    chainId: 1,\n    nonce: 1,\n    wait: async () => Promise.resolve({} as unknown as ContractReceipt),\n  };\n}\n","import {\n  BigNumber,\n  BigNumberish,\n  ContractReceipt,\n  ContractTransaction,\n  Overrides,\n  Signer,\n} from \"ethers\";\n\n/**\n * withdraw liquidity before the term is expired to underlying and pts\n * @param amount\n * @param poolAddress\n * @param signer\n * @param overrides\n * @returns\n */\nexport async function withdrawLiquidity(\n  amount: BigNumberish,\n  poolAddress: string,\n  signer: Signer,\n  overrides: Overrides = {},\n): Promise<ContractTransaction> {\n  const signerAddress = await signer.getAddress();\n\n  return {\n    hash: \"0x00\",\n    from: signerAddress,\n    gasLimit: BigNumber.from(100),\n    data: \"0x\",\n    value: BigNumber.from(amount),\n    confirmations: 1,\n    chainId: 1,\n    nonce: 1,\n    wait: async () => Promise.resolve({} as unknown as ContractReceipt),\n  };\n}\n"],"names":[],"version":3,"file":"main.js.map"}
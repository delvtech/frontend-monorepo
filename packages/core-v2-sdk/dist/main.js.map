{"mappings":"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","sources":["packages/core-v2-sdk/src/index.ts","packages/core-v2-sdk/src/client.ts","packages/core-v2-sdk/src/getters/MultiPoolGetter.ts","packages/core-v2-sdk/src/models/MultiPool.ts","packages/core-v2-sdk/src/getters/MultiTermGetter.ts","packages/core-v2-sdk/src/models/MultiTerm.ts","packages/core-v2-sdk/src/getters/YieldSourceGetter.ts","packages/core-v2-sdk/src/models/YieldSource.ts","packages/core-v2-sdk/src/datasources/MultiPool/MultiPoolDataSource.ts","packages/core-v2-sdk/src/datasources/MultiPool/MultiPoolContractDataSource.ts","packages/core-v2-sdk/src/datasources/MultiTerm/ERC4626TermContractDataSource.ts","packages/core-v2-sdk/src/datasources/YieldSource/ERC4626ContractDataSource.ts","packages/core-v2-sdk/src/datasources/MultiTerm/MultiTermDataSource.ts","packages/core-v2-sdk/src/datasources/YieldSource/YieldSourceDataSource.ts","packages/core-v2-sdk/src/models/Pool.ts","packages/core-v2-sdk/src/models/PrincipalToken.ts","packages/core-v2-sdk/src/models/Token.ts","packages/core-v2-sdk/src/models/Term.ts","packages/core-v2-sdk/src/models/YieldToken.ts","packages/core-v2-sdk/src/utils/buyYieldTokens/buyYieldTokens.ts","packages/core-v2-sdk/src/utils/calcSwapCongergentCurvePool/calculateTradePrincipalTokens.ts","packages/core-v2-sdk/src/utils/calculateLPTokensOut/calculateLPTokensOut.ts","packages/core-v2-sdk/src/utils/provideLiquidity/provideLiquidity.ts","packages/core-v2-sdk/src/utils/redeemLiquidity/redeemLiquidity.ts","packages/core-v2-sdk/src/utils/tradePrincipalTokens/tradePrincipalTokens.ts","packages/core-v2-sdk/src/utils/withdrawLiquidity/withdrawLiquidity.ts"],"sourcesContent":["export { ElementClient } from \"./client\";\r\n\r\nexport * from \"./datasources/MultiPool/MultiPoolDataSource\";\r\nexport * from \"./datasources/MultiPool/MultiPoolContractDataSource\";\r\nexport * from \"./datasources/MultiTerm/MultiTermDataSource\";\r\nexport * from \"./datasources/MultiTerm/ERC4626TermContractDataSource\";\r\nexport * from \"./datasources/YieldSource/YieldSourceDataSource\";\r\nexport * from \"./datasources/YieldSource/ERC4626ContractDataSource\";\r\n\r\nexport * from \"./models/MultiPool\";\r\nexport * from \"./models/MultiTerm\";\r\nexport * from \"./models/Pool\";\r\nexport * from \"./models/PrincipalToken\";\r\nexport * from \"./models/Term\";\r\nexport * from \"./models/Token\";\r\nexport * from \"./models/YieldSource\";\r\nexport * from \"./models/YieldToken\";\r\n\r\nexport * from \"./utils/buyYieldTokens/buyYieldTokens\";\r\nexport * from \"./utils/calcSwapCongergentCurvePool/calculateTradePrincipalTokens\";\r\nexport * from \"./utils/calculateLPTokensOut/calculateLPTokensOut\";\r\nexport * from \"./utils/provideLiquidity/provideLiquidity\";\r\nexport * from \"./utils/redeemLiquidity/redeemLiquidity\";\r\nexport * from \"./utils/tradePrincipalTokens/tradePrincipalTokens\";\r\nexport * from \"./utils/withdrawLiquidity/withdrawLiquidity\";\r\n","import { CoreV2Context } from \"src/context\";\r\nimport { MultiPoolGetter } from \"src/getters/MultiPoolGetter\";\r\nimport { MultiTermGetter } from \"src/getters/MultiTermGetter\";\r\nimport { YieldSourceGetter } from \"src/getters/YieldSourceGetter\";\r\n\r\nexport class ElementClient {\r\n  context: CoreV2Context;\r\n  multiPools: MultiPoolGetter;\r\n  multiTerms: MultiTermGetter;\r\n  yieldSources: YieldSourceGetter;\r\n\r\n  constructor(context: CoreV2Context) {\r\n    this.context = context;\r\n    this.multiPools = new MultiPoolGetter(this)\r\n    this.multiTerms = new MultiTermGetter(this)\r\n    this.yieldSources = new YieldSourceGetter(this)\r\n  }\r\n}\r\n","import LRUCache from \"lru-cache\";\nimport { cached } from \"@elementfi/base\";\nimport { ElementClient } from \"src/client\";\nimport { MultiPool } from \"src/models/MultiPool\";\nimport { MultiTerm } from \"src/models/MultiTerm\";\nimport { Getter } from \"./getter\";\n\nexport class MultiPoolGetter implements Getter<MultiPool | null> {\n  client: ElementClient;\n  cache: LRUCache<string, any>\n\n  constructor(client: ElementClient) {\n    this.client = client;\n    this.cache = new LRUCache({ max: 500 });\n  }\n\n  get(address: string): MultiPool | null {\n    return cached({\n      cacheKey: address,\n      cache: this.cache,\n      callback: () => {\n        const dataSource = this.client.context.multiPools.find(\n          (multiPool) => multiPool.address === address,\n        );\n        if (!dataSource) {\n          return null;\n        }\n        const multiTermAddress = dataSource.multiTerm.address;\n        return new MultiPool({\n          address,\n          multiTerm: this.client.multiTerms.get(multiTermAddress) as MultiTerm,\n        });\n      }\n    })\n  }\n\n  getAll(): MultiPool[] {\n    return [];\n  }\n}\n","import { MultiTerm } from \"./MultiTerm\";\r\n\r\nexport interface MultiPoolFields {\r\n  address: string;\r\n  multiTerm: MultiTerm;\r\n}\r\n\r\nexport class MultiPool {\r\n  address: string;\r\n  multiTerm: MultiTerm;\r\n\r\n  constructor({ address, multiTerm }: MultiPoolFields) {\r\n    this.address = address;\r\n    this.multiTerm = multiTerm;\r\n  }\r\n}\r\n","import { cached } from \"@elementfi/base\";\nimport LRUCache from \"lru-cache\";\nimport { ElementClient } from \"src/client\";\nimport { MultiTerm } from \"src/models/MultiTerm\";\nimport { YieldSource } from \"src/models/YieldSource\";\nimport { Getter } from \"./getter\";\n\nexport class MultiTermGetter implements Getter<MultiTerm | null> {\n  client: ElementClient;\n  cache: LRUCache<string, any>;\n\n  constructor(client: ElementClient) {\n    this.client = client;\n    this.cache = new LRUCache({ max: 500 });\n  }\n\n  get(address: string): MultiTerm | null {\n    return cached({\n      cacheKey: address,\n      cache: this.cache,\n      callback: () => {\n        const multiPoolDataSource = this.client.context.multiPools.find(\n          (multiPool) => multiPool.multiTerm.address === address,\n        );\n        if (!multiPoolDataSource) {\n          return null;\n        }\n        const yieldSourceAddress =\n          multiPoolDataSource.multiTerm.yieldSource.address;\n        return new MultiTerm({\n          address,\n          yieldSource: this.client.yieldSources.get(\n            yieldSourceAddress,\n          ) as YieldSource,\n        });\n      },\n    });\n  }\n\n  getAll(): MultiTerm[] {\n    return [];\n  }\n}\n","import { Term } from \"./Term\";\r\nimport { Token } from \"./Token\";\r\nimport { YieldSource } from \"./YieldSource\";\r\n\r\nexport interface MultiTermFields {\r\n  address: string;\r\n  yieldSource: YieldSource;\r\n  // baseAsset: Token;\r\n  // terms: Term[];\r\n  // totalVolume: string;\r\n  // perDayVolume: string;\r\n  // yields: string[];\r\n}\r\n\r\nexport class MultiTerm {\r\n  address: string;\r\n  yieldSource: YieldSource;\r\n  // baseAsset: Token;\r\n  // terms: Term[];\r\n  // totalVolume: string;\r\n  // perDayVolume: string;\r\n  // yields: string[];\r\n\r\n  constructor({\r\n    address,\r\n    yieldSource,\r\n    // baseAsset,\r\n    // terms,\r\n    // totalVolume,\r\n    // perDayVolume,\r\n    // yields,\r\n  }: MultiTermFields) {\r\n    this.address = address;\r\n    this.yieldSource = yieldSource;\r\n    // this.baseAsset = baseAsset;\r\n    // this.terms = terms;\r\n    // this.totalVolume = totalVolume;\r\n    // this.perDayVolume = perDayVolume;\r\n    // this.yields = yields;\r\n  }\r\n}","import { ElementClient } from \"src/client\";\nimport { YieldSource } from \"src/models/YieldSource\";\nimport { Getter } from \"./getter\";\n\nexport class YieldSourceGetter implements Getter<YieldSource | null> {\n  client: ElementClient;\n\n  constructor(client: ElementClient) {\n    this.client = client;\n  }\n\n  get(address: string): YieldSource | null {\n    return new YieldSource({ address });\n  }\n\n  getAll(): YieldSource[] {\n    return [];\n  }\n}\n","export enum Protocol {\r\n  YEARN = \"Yearn\",\r\n}\r\n\r\nexport interface YieldSourceOptions {\r\n  address: string;\r\n}\r\n\r\nexport class YieldSource {\r\n  address: string;\r\n\r\n  constructor({ address }: YieldSourceOptions) {\r\n    this.address = address;\r\n  }\r\n}\r\n","import { MultiTermDataSource } from \"src/datasources/MultiTerm/MultiTermDataSource\";\r\n\r\nexport interface MultiPoolDataSource {\r\n  address: string;\r\n  multiTerm: MultiTermDataSource;\r\n}\r\n","import { providers } from \"ethers\";\r\nimport LRUCache from \"lru-cache\";\r\nimport {\r\n  ERC4626Term__factory,\r\n  Pool,\r\n  Pool__factory,\r\n} from \"@elementfi/core-v2-typechain\";\r\nimport { MultiPoolDataSource } from \"./MultiPoolDataSource\";\r\nimport { MultiTermDataSource } from \"src/datasources/MultiTerm/MultiTermDataSource\";\r\nimport { ERC4626TermContractDataSource } from \"src/datasources/MultiTerm/ERC4626TermContractDataSource\";\r\n\r\ninterface MultiPoolContractDataSourceOptions {\r\n  address: string;\r\n  provider: providers.BaseProvider;\r\n  multiTerm: MultiTermDataSource;\r\n}\r\n\r\nexport class MultiPoolContractDataSource implements MultiPoolDataSource {\r\n  address: string;\r\n  contract: Pool;\r\n  multiTerm: MultiTermDataSource;\r\n  cache: LRUCache<string, any>;\r\n\r\n  constructor({\r\n    address,\r\n    provider,\r\n    multiTerm,\r\n  }: MultiPoolContractDataSourceOptions) {\r\n    this.address = address;\r\n    this.contract = Pool__factory.connect(address, provider);\r\n    this.multiTerm = multiTerm;\r\n    this.cache = new LRUCache({ max: 500 });\r\n  }\r\n\r\n  static async createERC4626MultiPool(\r\n    address: string,\r\n    provider: providers.BaseProvider,\r\n  ): Promise<MultiPoolContractDataSource> {\r\n    const multiPoolContract = Pool__factory.connect(address, provider);\r\n    const multiTermAddress = await multiPoolContract.term();\r\n    const termContract = ERC4626Term__factory.connect(\r\n      multiTermAddress,\r\n      provider,\r\n    );\r\n    const yieldSourceAddress = await termContract.vault();\r\n    const multiTermDataSource = new ERC4626TermContractDataSource({\r\n      address: multiTermAddress,\r\n      provider,\r\n      yieldSource: yieldSourceAddress,\r\n    });\r\n    return new MultiPoolContractDataSource({\r\n      address,\r\n      provider,\r\n      multiTerm: multiTermDataSource,\r\n    });\r\n  }\r\n}\r\n","import { providers } from \"ethers\";\r\nimport LRUCache from \"lru-cache\";\r\nimport {\r\n  ERC4626Term,\r\n  ERC4626Term__factory,\r\n} from \"@elementfi/core-v2-typechain\";\r\nimport { MultiTermDataSource } from \"./MultiTermDataSource\";\r\nimport { cached } from \"@elementfi/base\";\r\nimport { YieldSourceDataSource } from \"src/datasources/YieldSource/YieldSourceDataSource\";\r\nimport { ERC4626ContractDataSource } from \"src/datasources/YieldSource/ERC4626ContractDataSource\";\r\n\r\ninterface ERC4626TermContractDataSourceOptions {\r\n  address: string;\r\n  provider: providers.BaseProvider;\r\n  /**\r\n   * A YieldSourceDataSource instance or the address of an ERC4626 vault\r\n   */\r\n  yieldSource: YieldSourceDataSource | string;\r\n}\r\n\r\nexport class ERC4626TermContractDataSource implements MultiTermDataSource {\r\n  address: string;\r\n  contract: ERC4626Term;\r\n  yieldSource: YieldSourceDataSource;\r\n  cache: LRUCache<string, any>;\r\n\r\n  constructor({\r\n    address,\r\n    provider,\r\n    yieldSource,\r\n  }: ERC4626TermContractDataSourceOptions) {\r\n    this.address = address;\r\n    this.contract = ERC4626Term__factory.connect(address, provider);\r\n    this.yieldSource =\r\n      typeof yieldSource === \"string\"\r\n        ? new ERC4626ContractDataSource({\r\n            address: yieldSource,\r\n            provider,\r\n          })\r\n        : yieldSource;\r\n    this.cache = new LRUCache({ max: 500 });\r\n  }\r\n\r\n  getYieldSourceAddress(): Promise<string> {\r\n    return cached({\r\n      cacheKey: \"getYieldSourceAddress\",\r\n      cache: this.cache,\r\n      callback: () => this.contract.vault(),\r\n    });\r\n  }\r\n}\r\n","import { YieldSourceDataSource } from \"./YieldSourceDataSource\";\r\nimport { providers } from \"ethers\";\r\nimport LRUCache from \"lru-cache\";\r\nimport { cached } from \"@elementfi/base\";\r\nimport { ERC4626, ERC4626__factory } from \"@elementfi/core-v2-typechain\";\r\n\r\ninterface ERC4626ContractDataSourceOptions {\r\n  address: string;\r\n  provider: providers.BaseProvider;\r\n}\r\n\r\nexport class ERC4626ContractDataSource implements YieldSourceDataSource {\r\n  address: string;\r\n  contract: ERC4626;\r\n  cache: LRUCache<string, any>;\r\n\r\n  constructor({ address, provider }: ERC4626ContractDataSourceOptions) {\r\n    this.address = address;\r\n    this.contract = ERC4626__factory.connect(address, provider);\r\n    this.cache = new LRUCache({ max: 500 });\r\n  }\r\n\r\n  async getName(): Promise<string> {\r\n    return cached({\r\n      cacheKey: \"getName\",\r\n      callback: async () => {\r\n        return this.contract.name();\r\n      },\r\n      cache: this.cache,\r\n    });\r\n  }\r\n}\r\n","import { YieldSourceDataSource } from \"src/datasources/YieldSource/YieldSourceDataSource\";\r\n\r\nexport interface MultiTermDataSource {\r\n  address: string;\r\n  yieldSource: YieldSourceDataSource;\r\n}\r\n","export interface YieldSourceDataSource {\r\n  address: string;\r\n  getName: () => Promise<string>;\r\n}\r\n","import { MultiPool } from \"./MultiPool\";\r\nimport { PrincipalToken } from \"./PrincipalToken\";\r\nimport { Term } from \"./Term\";\r\nimport { Token } from \"./Token\";\r\nimport { YieldSource } from \"./YieldSource\";\r\n\r\nexport interface PoolFields {\r\n  id: string;\r\n  multiPool: MultiPool;\r\n  maturity: string;\r\n  yieldSource: YieldSource;\r\n  baseAsset: Token;\r\n  baseAssetReserves: string;\r\n  shareAsset: Token;\r\n  shareAssetReserves: string;\r\n  principalToken: PrincipalToken;\r\n  principalTokenReserves: string;\r\n  lpToken: Token;\r\n  price: string;\r\n  priceFiat: string;\r\n  term: Term;\r\n  tvl: string;\r\n}\r\n\r\nexport class Pool {\r\n  id: string;\r\n  multiPool: MultiPool;\r\n  maturity: string;\r\n  yieldSource: YieldSource;\r\n  baseAsset: Token;\r\n  baseAssetReserves: string;\r\n  shareAsset: Token;\r\n  shareAssetReserves: string;\r\n  principalToken: PrincipalToken;\r\n  principalTokenReserves: string;\r\n  lpToken: Token;\r\n  price: string;\r\n  priceFiat: string;\r\n  term: Term;\r\n  tvl: string;\r\n\r\n  constructor({\r\n    id,\r\n    multiPool,\r\n    maturity,\r\n    yieldSource,\r\n    baseAsset,\r\n    baseAssetReserves,\r\n    shareAsset,\r\n    shareAssetReserves,\r\n    principalToken,\r\n    principalTokenReserves,\r\n    lpToken,\r\n    price,\r\n    priceFiat,\r\n    term,\r\n    tvl,\r\n  }: PoolFields) {\r\n    this.id = id;\r\n    this.multiPool = multiPool;\r\n    this.maturity = maturity;\r\n    this.yieldSource = yieldSource;\r\n    this.baseAsset = baseAsset;\r\n    this.baseAssetReserves = baseAssetReserves;\r\n    this.shareAsset = shareAsset;\r\n    this.shareAssetReserves = shareAssetReserves;\r\n    this.principalToken = principalToken;\r\n    this.principalTokenReserves = principalTokenReserves;\r\n    this.lpToken = lpToken;\r\n    this.price = price;\r\n    this.priceFiat = priceFiat;\r\n    this.term = term;\r\n    this.tvl = tvl;\r\n  }\r\n}\r\n","import { Pool } from \"./Pool\";\r\nimport { Token, TokenFields } from \"./Token\";\r\n\r\nexport interface PrincipalTokenFields extends TokenFields {\r\n  tokenId: string;\r\n  maturity: string;\r\n  pool: Pool;\r\n  baseAsset: Token;\r\n}\r\n\r\nexport class PrincipalToken extends Token {\r\n  constructor(fields: PrincipalTokenFields) {\r\n    super(fields);\r\n    Object.assign(this, fields);\r\n  }\r\n}","export interface TokenFields {\r\n  address: string;\r\n  symbol: string;\r\n  decimals: number;\r\n  name: string;\r\n  price: string;\r\n}\r\n\r\nexport class Token {\r\n  address: string;\r\n  symbol: string;\r\n  decimals: number;\r\n  name: string;\r\n  price: string;\r\n\r\n  constructor({ address, symbol, decimals, name, price }: TokenFields) {\r\n    this.address = address;\r\n    this.symbol = symbol;\r\n    this.decimals = decimals;\r\n    this.name = name;\r\n    this.price = price;\r\n  }\r\n}\r\n","import { MultiTerm } from \"./MultiTerm\";\r\nimport { Pool } from \"./Pool\";\r\nimport { PrincipalToken } from \"./PrincipalToken\";\r\nimport { Token } from \"./Token\";\r\nimport { YieldSource } from \"./YieldSource\";\r\n\r\nexport interface TermFields {\r\n  id: string;\r\n  multiTerm: MultiTerm;\r\n  name: string;\r\n  maturity: string;\r\n  yieldSource: YieldSource;\r\n  baseAsset: Token;\r\n  principalToken: PrincipalToken;\r\n  pool: Pool;\r\n  createdTimestamp: number;\r\n  createdAtBlock: number;\r\n  variableAPY: number;\r\n  fixedAPR: number;\r\n}\r\n\r\nexport class Term {\r\n  id: string;\r\n  multiTerm: MultiTerm;\r\n  name: string;\r\n  maturity: string;\r\n  yieldSource: YieldSource;\r\n  baseAsset: Token;\r\n  principalToken: PrincipalToken;\r\n  pool: Pool;\r\n  createdTimestamp: number;\r\n  createdAtBlock: number;\r\n  variableAPY: number;\r\n  fixedAPR: number;\r\n\r\n  constructor({\r\n    id,\r\n    multiTerm,\r\n    name,\r\n    maturity,\r\n    yieldSource,\r\n    baseAsset,\r\n    principalToken,\r\n    pool,\r\n    createdTimestamp,\r\n    createdAtBlock,\r\n    variableAPY,\r\n    fixedAPR,\r\n  }: TermFields) {\r\n    this.id = id;\r\n    this.multiTerm = multiTerm;\r\n    this.name = name;\r\n    this.maturity = maturity;\r\n    this.yieldSource = yieldSource;\r\n    this.baseAsset = baseAsset;\r\n    this.principalToken = principalToken;\r\n    this.pool = pool;\r\n    this.createdTimestamp = createdTimestamp;\r\n    this.createdAtBlock = createdAtBlock;\r\n    this.variableAPY = variableAPY;\r\n    this.fixedAPR = fixedAPR;\r\n  }\r\n}\r\n","import { Token, TokenFields } from \"./Token\";\r\nimport { Pool } from \"./Pool\";\r\n\r\nexport interface YieldTokenFields extends TokenFields {\r\n  tokenId: string;\r\n  startDate: string;\r\n  maturity: string;\r\n  pool: Pool;\r\n  accruedInterest: string;\r\n}\r\n\r\nexport class YieldToken extends Token {\r\n  constructor(fields: YieldTokenFields) {\r\n    super(fields);\r\n    Object.assign(this, fields);\r\n  }\r\n}\r\n","import {\n  BigNumber,\n  BigNumberish,\n  ContractReceipt,\n  ContractTransaction,\n  Overrides,\n  Signer,\n} from \"ethers\";\n\n/**\n * A method to buy yield tokens.  Unclear at this point if this is simply performing the internal flashloan to perform a YTC.\n * @param tokenAddress\n * @param vaultAddress\n * @param amount\n * @param signer\n * @param overrides\n * @returns\n */\nexport async function buyYieldTokens(\n  tokenAddress: string,\n  vaultAddress: string,\n  amount: BigNumberish,\n  signer: Signer,\n  overrides: Overrides = {},\n): Promise<ContractTransaction> {\n  const signerAddress = await signer.getAddress();\n\n  return {\n    hash: \"0x00\",\n    from: signerAddress,\n    gasLimit: BigNumber.from(100),\n    data: \"0x\",\n    value: BigNumber.from(amount),\n    confirmations: 1,\n    chainId: 1,\n    nonce: 1,\n    wait: async () => Promise.resolve({} as unknown as ContractReceipt),\n  };\n}\n","import {\n  BigNumber,\n  BigNumberish,\n  ContractReceipt,\n  ContractTransaction,\n  Overrides,\n  Signer,\n} from \"ethers\";\n\n/**\n * calculates a trade of prinicipal tokens\n * this is likely to get a lot more complicated with swap kinds, exact in, exact out etc\n * @param tokenAmountsIn\n * @param tokenReserves\n * @returns\n */\nexport function calcSwapConvergentCurvePool(\n  tokenAmountsIn: BigNumberish[],\n  tokenReserves: BigNumberish[],\n): string {\n  return \"1\";\n}\n","import { BigNumberish } from \"ethers\";\n\n/**\n * calculates an amount of LP tokens out for an amount of asset provided.  could be single sided or double sided.\n * this one is likely to get a lot more complicated.  there could be join kinds like exact amount in, exact amount out etc.\n * @param tokenAmountsIn\n * @param tokenReserves\n * @returns\n */\nexport function calculateLPTokensOut(\n  tokenAmountsIn: BigNumberish[],\n  tokenReserves: BigNumberish[],\n): string {\n  return \"1\";\n}\n","import {\n  BigNumber,\n  BigNumberish,\n  ContractReceipt,\n  ContractTransaction,\n  Overrides,\n  Signer,\n} from \"ethers\";\n\n/**\n * A function to provide liquidity to a v2 term\n * @param tokensInAddresses\n * @param amounts\n * @param vaultAddress\n * @param slippage\n * @param signer\n * @param overrides\n * @returns\n */\nexport async function provideLiquidity(\n  amounts: BigNumberish[],\n  tokensInAddresses: string[],\n  vaultAddress: string,\n  slippage: BigNumberish,\n  signer: Signer,\n  overrides: Overrides = {},\n): Promise<ContractTransaction> {\n  const signerAddress = await signer.getAddress();\n\n  return {\n    hash: \"0x00\",\n    from: signerAddress,\n    gasLimit: BigNumber.from(100),\n    data: \"0x\",\n    value: BigNumber.from(amounts[0]),\n    confirmations: 1,\n    chainId: 1,\n    nonce: 1,\n    wait: async () => Promise.resolve({} as unknown as ContractReceipt),\n  };\n}\n","import {\n  BigNumber,\n  BigNumberish,\n  ContractReceipt,\n  ContractTransaction,\n  Overrides,\n  Signer,\n} from \"ethers\";\n\n/**\n * redeem liquidity after the term is mature to the underlying\n * @param amount\n * @param poolAddress\n * @param signer\n * @param overrides\n * @returns\n */\nexport async function redeemLiquidity(\n  amount: BigNumberish,\n  poolAddress: string,\n  signer: Signer,\n  overrides: Overrides = {},\n): Promise<ContractTransaction> {\n  const signerAddress = await signer.getAddress();\n\n  return {\n    hash: \"0x00\",\n    from: signerAddress,\n    gasLimit: BigNumber.from(100),\n    data: \"0x\",\n    value: BigNumber.from(amount),\n    confirmations: 1,\n    chainId: 1,\n    nonce: 1,\n    wait: async () => Promise.resolve({} as unknown as ContractReceipt),\n  };\n}\n","import {\n  BigNumber,\n  BigNumberish,\n  ContractReceipt,\n  ContractTransaction,\n  Overrides,\n  Signer,\n} from \"ethers\";\n\n/**\n * performs a trade of principal tokens on a v2 pool\n * this is likely to get a lot more complicated with swap kinds, exact in, exact out etc\n * @param tokenInAddress\n * @param tokenOutAddress\n * @param vaultAddress\n * @param amount\n * @param slippage\n * @param signer\n * @param overrides\n * @returns\n */\nexport async function tradePrincipalTokens(\n  amount: BigNumberish,\n  tokenInAddress: string,\n  tokenOutAddress: string,\n  vaultAddress: string,\n  slippage: BigNumberish,\n  signer: Signer,\n  overrides: Overrides = {},\n): Promise<ContractTransaction> {\n  const signerAddress = await signer.getAddress();\n\n  return {\n    hash: \"0x00\",\n    from: signerAddress,\n    gasLimit: BigNumber.from(100),\n    data: \"0x\",\n    value: BigNumber.from(amount),\n    confirmations: 1,\n    chainId: 1,\n    nonce: 1,\n    wait: async () => Promise.resolve({} as unknown as ContractReceipt),\n  };\n}\n","import {\n  BigNumber,\n  BigNumberish,\n  ContractReceipt,\n  ContractTransaction,\n  Overrides,\n  Signer,\n} from \"ethers\";\n\n/**\n * withdraw liquidity before the term is expired to underlying and pts\n * @param amount\n * @param poolAddress\n * @param signer\n * @param overrides\n * @returns\n */\nexport async function withdrawLiquidity(\n  amount: BigNumberish,\n  poolAddress: string,\n  signer: Signer,\n  overrides: Overrides = {},\n): Promise<ContractTransaction> {\n  const signerAddress = await signer.getAddress();\n\n  return {\n    hash: \"0x00\",\n    from: signerAddress,\n    gasLimit: BigNumber.from(100),\n    data: \"0x\",\n    value: BigNumber.from(amount),\n    confirmations: 1,\n    chainId: 1,\n    nonce: 1,\n    wait: async () => Promise.resolve({} as unknown as ContractReceipt),\n  };\n}\n"],"names":[],"version":3,"file":"main.js.map"}
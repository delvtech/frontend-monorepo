type Query {
  "Look up the multi term contract for a given yield source, eg: Yearn USDC Vault"
  multiTerm(address: ID, yieldSource: ID): MultiTerm
  multiTerms(
    # The terms to search over, results will strictly be matches from this list
    addresses: [ID!]
    # Filter by yield sources
    yieldSources: [ID!]
    # Filter by base assets
    baseAsset: [ID!]
  ): [MultiTerm]!

  term(multiTerm: ID!, maturity: Int!): Term
  terms(
    baseAssets: [ID!]
    multiTerms: [ID!]
    yieldSources: [ID!]
    timeRemaining: String
    holders: [ID!]
  ): [Term]

  multiPool(address: ID, yieldSource: ID!): MultiPool
  "Look up the pool for a given maturity date"
  pool(multiPool: ID!, maturity: Int!): Pool
  pools(multiPool: ID!): [Pool]

  token(address: ID!): Token
  tokens(addresses: [ID!]): Token

  # Should the registry contain details about yield source or tokenlist
  # yieldSource(token: ID!): YieldSource!
  # yieldSources(names: [String!]!): [YieldSource]!
}

type MultiTerm {
  "general lookup across terms for arbitrary helper functions, to be expanded"
  address: ID!
  "Possibly fetched from a registry"
  yieldSource: YieldSource
  "The underlying token, sometimes referred to as base asset"
  baseAsset: Token
  terms: [Term]

  "pretty sure this is useful"
  tvl(atBlock: Int): String

  "scratch space: are these useful?"
  totalVolume: String
  perDayVolume: String
  yields: [String]
}

type Term {
  id: ID!
  multiTerm: MultiTerm!
  "Timestamp in milliseconds since unix epoch"
  maturity: Int!
  principalToken: PrincipalToken!
  "Possibly fetched from a registry"
  yieldSource: YieldSource
  baseAsset: Token
  "startDate must be between created and maturity"
  yieldToken(startDate: String!): YieldToken
  pool: Pool
  "Dollar amount of deposits into the term: union(mint,LP)"
  tvl(atBlock: Int): String
  "Timestamp in milliseconds since unix epoch"
  createdTimestamp: Int
  "Block Int the term was created at"
  createdAtBlock: Int

  # rates live on the term because PTs, YTs, and Pools don't have any accounting
  # for the yield itself
  variableAPY: Int
  fixedAPR: Int
}

type YieldToken {
  id: ID!
  startDate: String!
  maturity: Int!
  term: Term
  accruedInterest: String
}

type PrincipalToken {
  id: ID!
  maturity: Int!
  term: Term
  # "price in terms of base asset or fiat"
  # price: String
  # priceFiat: String
  "the token this principal token will resolve 1 to 1 to."
  baseAsset: Token
}

type Token {
  address: ID!
  symbol: String
  decimals: String
  name: String
  price: String
  allowance(owner: String!, spender: String!): String
  balanceOf(owner: String!): String
}

type MultiPool {
  address: ID!
  "Possibly fetched from a registry"
  yieldSource: YieldSource
  pool(maturity: Int!): Pool
  pools: [Pool]
}

type Pool {
  id: ID!
  multiPool: MultiPool!
  maturity: Int!
  # ePyvUSDC (ep = element principal)
  lpToken: LPToken!
  principalToken: PrincipalToken!
  yieldSource: YieldSource
  # USDC
  baseAsset: Token
  baseAssetReserves: String
  # yvUSDC (yv = yearn vault)
  shareAsset: Token
  shareAssetReserves: String
  principalTokenReserves: String
  # price in terms of base asset or fiat
  price: String
  priceFiat: String
  term: Term
  tvl: String
  buyPreview(baseAssetAmountIn: String!): BuySwapPreview
  sellPreview(principalAmountTokenIn: String!): SellSwapPreview
}

type LPToken {
  id: ID!
  maturity: Int!
  pool: Pool
}

type BuySwapPreview {
  baseAssetAmountIn: String!
  principalTokenAmountOut: String!
  slippage: Int
}
type SellSwapPreview {
  principalTokenAmountIn: String!
  baseAssetAmountOut: String!
  slippage: Int
}

# 4626 vault standard interface
type YieldSource {
  # eg: vault address
  address: ID!

  # yearn
  protocol: String!

  # yearn vault USDC
  name: String!

  "placeholder for more yield source specific data"
  pricePerShare: String
}

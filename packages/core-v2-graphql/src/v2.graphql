type Query {
  "Look up the multi term contract for a given yield source, eg: Yearn USDC Vault"
  multiTerm(yieldSource: ID!): MultiTerm
  term(yieldSource: ID!, maturity: String!): Term
  terms(yieldSource: ID!): [Term]

  multiPool(yieldSource: ID!): MultiPool
  "Look up the pool for a given maturity date"
  pool(yieldSource: ID!, maturity: String!): Pool
  pools(yieldSource: ID!): [Pool]

  yieldSource(name: String!): YieldSource!
  yieldSources(names: [String!]!): [YieldSource]!
}

type MultiTerm {
  "general lookup across terms for arbitrary helper functions, to be expanded"
  address: ID!
  "Possibly fetched from a registry"
  yieldSource: YieldSource!
  "The underlying token, sometimes referred to as base asset"
  baseAsset: Token
  "pretty sure these are useful"
  terms: [Term]
  tvl(atBlock: Int): String

  "scratch space: are these useful?"
  totalVolume: String
  perDayVolume: String
  yields: [String]
}

type Term {
  id: ID!
  multiTerm: MultiTerm!
  name: String!
  "Timestamp in milliseconds since unix epoch"
  maturity: String!
  "Possibly fetched from a registry"
  yieldSource: YieldSource!
  baseAsset: Token
  principalToken: PrincipalToken
  "startDate must be between created and maturity"
  yieldToken(startDate: String!): YieldToken
  pool: Pool
  "Dollar amount of deposits into the term: union(mint,LP)"
  tvl: String
  "Timestamp in milliseconds since unix epoch"
  createdTimestamp: Int
  "Block Int the term was created at"
  createdAtBlock: Int
}

type YieldToken {
  address: ID!
  tokenId: ID!
  startDate: String!
  maturity: String!
  accruedInterest: String
}

type PrincipalToken {
  address: ID!
  tokenId: ID!
  maturity: String!
  "price in terms of base asset or fiat"
  price: String
  priceFiat: String
  " the token this principal token will resolve 1 to 1 to."
  baseAsset: Token
}

type Token {
  address: ID!
  symbol: String!
  decimals: Int!
  price: String
}

type MultiPool {
  address: ID!
  "Possibly fetched from a registry"
  yieldSource: YieldSource!
  pool(maturity: String!): Pool
  pools: [Pool]
}

type Pool {
  id: ID!
  multiPool: MultiPool!
  maturity: String!
  yieldSource: YieldSource!
  # USDC
  baseAsset: Token
  baseAssetReserves: String
  # yvUSDC (yv = yearn vault)
  shareAsset: Token
  shareAssetReserves: String
  # ePyvUSDC (ep = element principal)
  principalToken: PrincipalToken
  principalTokenReserves: String
  lpToken: Token
  "price in terms of base asset or fiat"
  price: String
  priceFiat: String
  term: Term
  tvl: String
  buyPreview(baseAssetIn: String!): SwapPreview
  sellPreview(principalTokenIn: String!): SwapPreview
}

type SwapPreview {
  baseAsset: String!
  principalTokenIn: String!
  slippage: Int
}

# 4626 vault standard interface
type YieldSource {
  "Yearn"
  name: ID!
  url: String
  # placeholder for more yield source specific data
  pricePerShare: String
}

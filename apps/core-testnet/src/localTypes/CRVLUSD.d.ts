/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CRVLUSDInterface extends ethers.utils.Interface {
  functions: {
    "initialize(string,string,address,uint256,uint256,uint256,address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "get_previous_balances()": FunctionFragment;
    "get_balances()": FunctionFragment;
    "get_twap_balances(uint256[2],uint256[2],uint256)": FunctionFragment;
    "get_price_cumulative_last()": FunctionFragment;
    "admin_fee()": FunctionFragment;
    "A()": FunctionFragment;
    "A_precise()": FunctionFragment;
    "get_virtual_price()": FunctionFragment;
    "calc_token_amount(uint256[2],bool)": FunctionFragment;
    "add_liquidity(uint256[2],uint256)": FunctionFragment;
    "get_dy(int128,int128,uint256)": FunctionFragment;
    "get_dy_underlying(int128,int128,uint256)": FunctionFragment;
    "exchange(int128,int128,uint256,uint256)": FunctionFragment;
    "exchange_underlying(int128,int128,uint256,uint256)": FunctionFragment;
    "remove_liquidity(uint256,uint256[2])": FunctionFragment;
    "remove_liquidity_imbalance(uint256[2],uint256)": FunctionFragment;
    "calc_withdraw_one_coin(uint256,int128)": FunctionFragment;
    "remove_liquidity_one_coin(uint256,int128,uint256)": FunctionFragment;
    "ramp_A(uint256,uint256)": FunctionFragment;
    "stop_ramp_A()": FunctionFragment;
    "admin_balances(uint256)": FunctionFragment;
    "withdraw_admin_fees()": FunctionFragment;
    "admin()": FunctionFragment;
    "coins(uint256)": FunctionFragment;
    "balances(uint256)": FunctionFragment;
    "fee()": FunctionFragment;
    "block_timestamp_last()": FunctionFragment;
    "initial_A()": FunctionFragment;
    "future_A()": FunctionFragment;
    "initial_A_time()": FunctionFragment;
    "future_A_time()": FunctionFragment;
    "name()": FunctionFragment;
    "symbol()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
    ],
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "get_previous_balances",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "get_balances",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "get_twap_balances",
    values: [
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish],
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "get_price_cumulative_last",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "admin_fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "A", values?: undefined): string;
  encodeFunctionData(functionFragment: "A_precise", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "get_virtual_price",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "calc_token_amount",
    values: [[BigNumberish, BigNumberish], boolean],
  ): string;
  encodeFunctionData(
    functionFragment: "add_liquidity",
    values: [[BigNumberish, BigNumberish], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "get_dy",
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "get_dy_underlying",
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "exchange",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "exchange_underlying",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity",
    values: [BigNumberish, [BigNumberish, BigNumberish]],
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity_imbalance",
    values: [[BigNumberish, BigNumberish], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "calc_withdraw_one_coin",
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity_one_coin",
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "ramp_A",
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "stop_ramp_A",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "admin_balances",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw_admin_fees",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "coins", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "block_timestamp_last",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "initial_A", values?: undefined): string;
  encodeFunctionData(functionFragment: "future_A", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initial_A_time",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "future_A_time",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined,
  ): string;

  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_previous_balances",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_balances",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_twap_balances",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_price_cumulative_last",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "admin_fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "A", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "A_precise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_virtual_price",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "calc_token_amount",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "add_liquidity",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "get_dy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_dy_underlying",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchange_underlying",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity_imbalance",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "calc_withdraw_one_coin",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity_one_coin",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "ramp_A", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stop_ramp_A",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "admin_balances",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw_admin_fees",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "coins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "block_timestamp_last",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "initial_A", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "future_A", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initial_A_time",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_A_time",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike,
  ): Result;

  events: {
    "Transfer(address,address,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "TokenExchange(address,int128,uint256,int128,uint256)": EventFragment;
    "TokenExchangeUnderlying(address,int128,uint256,int128,uint256)": EventFragment;
    "AddLiquidity(address,uint256[2],uint256[2],uint256,uint256)": EventFragment;
    "RemoveLiquidity(address,uint256[2],uint256[2],uint256)": EventFragment;
    "RemoveLiquidityOne(address,uint256,uint256,uint256)": EventFragment;
    "RemoveLiquidityImbalance(address,uint256[2],uint256[2],uint256,uint256)": EventFragment;
    "CommitNewAdmin(uint256,address)": EventFragment;
    "NewAdmin(address)": EventFragment;
    "CommitNewFee(uint256,uint256,uint256)": EventFragment;
    "NewFee(uint256,uint256)": EventFragment;
    "RampA(uint256,uint256,uint256,uint256)": EventFragment;
    "StopRampA(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenExchange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenExchangeUnderlying"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidityOne"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidityImbalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitNewAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitNewFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RampA"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StopRampA"): EventFragment;
}

export class CRVLUSD extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CRVLUSDInterface;

  functions: {
    initialize(
      _name: string,
      _symbol: string,
      _coin: string,
      _decimals: BigNumberish,
      _A: BigNumberish,
      _fee: BigNumberish,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    get_previous_balances(
      overrides?: CallOverrides,
    ): Promise<[[BigNumber, BigNumber]]>;

    get_balances(overrides?: CallOverrides): Promise<[[BigNumber, BigNumber]]>;

    get_twap_balances(
      _first_balances: [BigNumberish, BigNumberish],
      _last_balances: [BigNumberish, BigNumberish],
      _time_elapsed: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[[BigNumber, BigNumber]]>;

    get_price_cumulative_last(
      overrides?: CallOverrides,
    ): Promise<[[BigNumber, BigNumber]]>;

    admin_fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    A(overrides?: CallOverrides): Promise<[BigNumber]>;

    A_precise(overrides?: CallOverrides): Promise<[BigNumber]>;

    get_virtual_price(overrides?: CallOverrides): Promise<[BigNumber]>;

    "calc_token_amount(uint256[2],bool)"(
      _amounts: [BigNumberish, BigNumberish],
      _is_deposit: boolean,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    "calc_token_amount(uint256[2],bool,bool)"(
      _amounts: [BigNumberish, BigNumberish],
      _is_deposit: boolean,
      _previous: boolean,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    "add_liquidity(uint256[2],uint256)"(
      _amounts: [BigNumberish, BigNumberish],
      _min_mint_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "add_liquidity(uint256[2],uint256,address)"(
      _amounts: [BigNumberish, BigNumberish],
      _min_mint_amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "get_dy(int128,int128,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    "get_dy(int128,int128,uint256,uint256[2])"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      _balances: [BigNumberish, BigNumberish],
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    "get_dy_underlying(int128,int128,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    "get_dy_underlying(int128,int128,uint256,uint256[2])"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      _balances: [BigNumberish, BigNumberish],
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    "exchange(int128,int128,uint256,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "exchange(int128,int128,uint256,uint256,address)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "exchange_underlying(int128,int128,uint256,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "exchange_underlying(int128,int128,uint256,uint256,address)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "remove_liquidity(uint256,uint256[2])"(
      _burn_amount: BigNumberish,
      _min_amounts: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "remove_liquidity(uint256,uint256[2],address)"(
      _burn_amount: BigNumberish,
      _min_amounts: [BigNumberish, BigNumberish],
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "remove_liquidity_imbalance(uint256[2],uint256)"(
      _amounts: [BigNumberish, BigNumberish],
      _max_burn_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "remove_liquidity_imbalance(uint256[2],uint256,address)"(
      _amounts: [BigNumberish, BigNumberish],
      _max_burn_amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "calc_withdraw_one_coin(uint256,int128)"(
      _burn_amount: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    "calc_withdraw_one_coin(uint256,int128,bool)"(
      _burn_amount: BigNumberish,
      i: BigNumberish,
      _previous: boolean,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    "remove_liquidity_one_coin(uint256,int128,uint256)"(
      _burn_amount: BigNumberish,
      i: BigNumberish,
      _min_received: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "remove_liquidity_one_coin(uint256,int128,uint256,address)"(
      _burn_amount: BigNumberish,
      i: BigNumberish,
      _min_received: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    ramp_A(
      _future_A: BigNumberish,
      _future_time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    stop_ramp_A(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    admin_balances(
      i: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    withdraw_admin_fees(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    coins(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    balances(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    block_timestamp_last(overrides?: CallOverrides): Promise<[BigNumber]>;

    initial_A(overrides?: CallOverrides): Promise<[BigNumber]>;

    future_A(overrides?: CallOverrides): Promise<[BigNumber]>;

    initial_A_time(overrides?: CallOverrides): Promise<[BigNumber]>;

    future_A_time(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  initialize(
    _name: string,
    _symbol: string,
    _coin: string,
    _decimals: BigNumberish,
    _A: BigNumberish,
    _fee: BigNumberish,
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  approve(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  get_previous_balances(
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber]>;

  get_balances(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  get_twap_balances(
    _first_balances: [BigNumberish, BigNumberish],
    _last_balances: [BigNumberish, BigNumberish],
    _time_elapsed: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber]>;

  get_price_cumulative_last(
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber]>;

  admin_fee(overrides?: CallOverrides): Promise<BigNumber>;

  A(overrides?: CallOverrides): Promise<BigNumber>;

  A_precise(overrides?: CallOverrides): Promise<BigNumber>;

  get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

  "calc_token_amount(uint256[2],bool)"(
    _amounts: [BigNumberish, BigNumberish],
    _is_deposit: boolean,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  "calc_token_amount(uint256[2],bool,bool)"(
    _amounts: [BigNumberish, BigNumberish],
    _is_deposit: boolean,
    _previous: boolean,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  "add_liquidity(uint256[2],uint256)"(
    _amounts: [BigNumberish, BigNumberish],
    _min_mint_amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "add_liquidity(uint256[2],uint256,address)"(
    _amounts: [BigNumberish, BigNumberish],
    _min_mint_amount: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "get_dy(int128,int128,uint256)"(
    i: BigNumberish,
    j: BigNumberish,
    dx: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  "get_dy(int128,int128,uint256,uint256[2])"(
    i: BigNumberish,
    j: BigNumberish,
    dx: BigNumberish,
    _balances: [BigNumberish, BigNumberish],
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  "get_dy_underlying(int128,int128,uint256)"(
    i: BigNumberish,
    j: BigNumberish,
    dx: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  "get_dy_underlying(int128,int128,uint256,uint256[2])"(
    i: BigNumberish,
    j: BigNumberish,
    dx: BigNumberish,
    _balances: [BigNumberish, BigNumberish],
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  "exchange(int128,int128,uint256,uint256)"(
    i: BigNumberish,
    j: BigNumberish,
    dx: BigNumberish,
    min_dy: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "exchange(int128,int128,uint256,uint256,address)"(
    i: BigNumberish,
    j: BigNumberish,
    dx: BigNumberish,
    min_dy: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "exchange_underlying(int128,int128,uint256,uint256)"(
    i: BigNumberish,
    j: BigNumberish,
    dx: BigNumberish,
    min_dy: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "exchange_underlying(int128,int128,uint256,uint256,address)"(
    i: BigNumberish,
    j: BigNumberish,
    dx: BigNumberish,
    min_dy: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "remove_liquidity(uint256,uint256[2])"(
    _burn_amount: BigNumberish,
    _min_amounts: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "remove_liquidity(uint256,uint256[2],address)"(
    _burn_amount: BigNumberish,
    _min_amounts: [BigNumberish, BigNumberish],
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "remove_liquidity_imbalance(uint256[2],uint256)"(
    _amounts: [BigNumberish, BigNumberish],
    _max_burn_amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "remove_liquidity_imbalance(uint256[2],uint256,address)"(
    _amounts: [BigNumberish, BigNumberish],
    _max_burn_amount: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "calc_withdraw_one_coin(uint256,int128)"(
    _burn_amount: BigNumberish,
    i: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  "calc_withdraw_one_coin(uint256,int128,bool)"(
    _burn_amount: BigNumberish,
    i: BigNumberish,
    _previous: boolean,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  "remove_liquidity_one_coin(uint256,int128,uint256)"(
    _burn_amount: BigNumberish,
    i: BigNumberish,
    _min_received: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "remove_liquidity_one_coin(uint256,int128,uint256,address)"(
    _burn_amount: BigNumberish,
    i: BigNumberish,
    _min_received: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  ramp_A(
    _future_A: BigNumberish,
    _future_time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  stop_ramp_A(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  admin_balances(
    i: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  withdraw_admin_fees(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  coins(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  balances(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  block_timestamp_last(overrides?: CallOverrides): Promise<BigNumber>;

  initial_A(overrides?: CallOverrides): Promise<BigNumber>;

  future_A(overrides?: CallOverrides): Promise<BigNumber>;

  initial_A_time(overrides?: CallOverrides): Promise<BigNumber>;

  future_A_time(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    initialize(
      _name: string,
      _symbol: string,
      _coin: string,
      _decimals: BigNumberish,
      _A: BigNumberish,
      _fee: BigNumberish,
      _admin: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    get_previous_balances(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    get_balances(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    get_twap_balances(
      _first_balances: [BigNumberish, BigNumberish],
      _last_balances: [BigNumberish, BigNumberish],
      _time_elapsed: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    get_price_cumulative_last(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    admin_fee(overrides?: CallOverrides): Promise<BigNumber>;

    A(overrides?: CallOverrides): Promise<BigNumber>;

    A_precise(overrides?: CallOverrides): Promise<BigNumber>;

    get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

    "calc_token_amount(uint256[2],bool)"(
      _amounts: [BigNumberish, BigNumberish],
      _is_deposit: boolean,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "calc_token_amount(uint256[2],bool,bool)"(
      _amounts: [BigNumberish, BigNumberish],
      _is_deposit: boolean,
      _previous: boolean,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "add_liquidity(uint256[2],uint256)"(
      _amounts: [BigNumberish, BigNumberish],
      _min_mint_amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "add_liquidity(uint256[2],uint256,address)"(
      _amounts: [BigNumberish, BigNumberish],
      _min_mint_amount: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "get_dy(int128,int128,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "get_dy(int128,int128,uint256,uint256[2])"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      _balances: [BigNumberish, BigNumberish],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "get_dy_underlying(int128,int128,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "get_dy_underlying(int128,int128,uint256,uint256[2])"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      _balances: [BigNumberish, BigNumberish],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "exchange(int128,int128,uint256,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "exchange(int128,int128,uint256,uint256,address)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "exchange_underlying(int128,int128,uint256,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "exchange_underlying(int128,int128,uint256,uint256,address)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "remove_liquidity(uint256,uint256[2])"(
      _burn_amount: BigNumberish,
      _min_amounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    "remove_liquidity(uint256,uint256[2],address)"(
      _burn_amount: BigNumberish,
      _min_amounts: [BigNumberish, BigNumberish],
      _receiver: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    "remove_liquidity_imbalance(uint256[2],uint256)"(
      _amounts: [BigNumberish, BigNumberish],
      _max_burn_amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "remove_liquidity_imbalance(uint256[2],uint256,address)"(
      _amounts: [BigNumberish, BigNumberish],
      _max_burn_amount: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "calc_withdraw_one_coin(uint256,int128)"(
      _burn_amount: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "calc_withdraw_one_coin(uint256,int128,bool)"(
      _burn_amount: BigNumberish,
      i: BigNumberish,
      _previous: boolean,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "remove_liquidity_one_coin(uint256,int128,uint256)"(
      _burn_amount: BigNumberish,
      i: BigNumberish,
      _min_received: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "remove_liquidity_one_coin(uint256,int128,uint256,address)"(
      _burn_amount: BigNumberish,
      i: BigNumberish,
      _min_received: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    ramp_A(
      _future_A: BigNumberish,
      _future_time: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    stop_ramp_A(overrides?: CallOverrides): Promise<void>;

    admin_balances(
      i: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    withdraw_admin_fees(overrides?: CallOverrides): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    coins(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    balances(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    block_timestamp_last(overrides?: CallOverrides): Promise<BigNumber>;

    initial_A(overrides?: CallOverrides): Promise<BigNumber>;

    future_A(overrides?: CallOverrides): Promise<BigNumber>;

    initial_A_time(overrides?: CallOverrides): Promise<BigNumber>;

    future_A_time(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Transfer(
      sender?: string | null,
      receiver?: string | null,
      value?: null,
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; receiver: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    TokenExchange(
      buyer?: string | null,
      sold_id?: null,
      tokens_sold?: null,
      bought_id?: null,
      tokens_bought?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        buyer: string;
        sold_id: BigNumber;
        tokens_sold: BigNumber;
        bought_id: BigNumber;
        tokens_bought: BigNumber;
      }
    >;

    TokenExchangeUnderlying(
      buyer?: string | null,
      sold_id?: null,
      tokens_sold?: null,
      bought_id?: null,
      tokens_bought?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        buyer: string;
        sold_id: BigNumber;
        tokens_sold: BigNumber;
        bought_id: BigNumber;
        tokens_bought: BigNumber;
      }
    >;

    AddLiquidity(
      provider?: string | null,
      token_amounts?: null,
      fees?: null,
      invariant?: null,
      token_supply?: null,
    ): TypedEventFilter<
      [
        string,
        [BigNumber, BigNumber],
        [BigNumber, BigNumber],
        BigNumber,
        BigNumber,
      ],
      {
        provider: string;
        token_amounts: [BigNumber, BigNumber];
        fees: [BigNumber, BigNumber];
        invariant: BigNumber;
        token_supply: BigNumber;
      }
    >;

    RemoveLiquidity(
      provider?: string | null,
      token_amounts?: null,
      fees?: null,
      token_supply?: null,
    ): TypedEventFilter<
      [string, [BigNumber, BigNumber], [BigNumber, BigNumber], BigNumber],
      {
        provider: string;
        token_amounts: [BigNumber, BigNumber];
        fees: [BigNumber, BigNumber];
        token_supply: BigNumber;
      }
    >;

    RemoveLiquidityOne(
      provider?: string | null,
      token_amount?: null,
      coin_amount?: null,
      token_supply?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        provider: string;
        token_amount: BigNumber;
        coin_amount: BigNumber;
        token_supply: BigNumber;
      }
    >;

    RemoveLiquidityImbalance(
      provider?: string | null,
      token_amounts?: null,
      fees?: null,
      invariant?: null,
      token_supply?: null,
    ): TypedEventFilter<
      [
        string,
        [BigNumber, BigNumber],
        [BigNumber, BigNumber],
        BigNumber,
        BigNumber,
      ],
      {
        provider: string;
        token_amounts: [BigNumber, BigNumber];
        fees: [BigNumber, BigNumber];
        invariant: BigNumber;
        token_supply: BigNumber;
      }
    >;

    CommitNewAdmin(
      deadline?: BigNumberish | null,
      admin?: string | null,
    ): TypedEventFilter<
      [BigNumber, string],
      { deadline: BigNumber; admin: string }
    >;

    NewAdmin(
      admin?: string | null,
    ): TypedEventFilter<[string], { admin: string }>;

    CommitNewFee(
      deadline?: BigNumberish | null,
      fee?: null,
      admin_fee?: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { deadline: BigNumber; fee: BigNumber; admin_fee: BigNumber }
    >;

    NewFee(
      fee?: null,
      admin_fee?: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { fee: BigNumber; admin_fee: BigNumber }
    >;

    RampA(
      old_A?: null,
      new_A?: null,
      initial_time?: null,
      future_time?: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        old_A: BigNumber;
        new_A: BigNumber;
        initial_time: BigNumber;
        future_time: BigNumber;
      }
    >;

    StopRampA(
      A?: null,
      t?: null,
    ): TypedEventFilter<[BigNumber, BigNumber], { A: BigNumber; t: BigNumber }>;
  };

  estimateGas: {
    initialize(
      _name: string,
      _symbol: string,
      _coin: string,
      _decimals: BigNumberish,
      _A: BigNumberish,
      _fee: BigNumberish,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    get_previous_balances(overrides?: CallOverrides): Promise<BigNumber>;

    get_balances(overrides?: CallOverrides): Promise<BigNumber>;

    get_twap_balances(
      _first_balances: [BigNumberish, BigNumberish],
      _last_balances: [BigNumberish, BigNumberish],
      _time_elapsed: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    get_price_cumulative_last(overrides?: CallOverrides): Promise<BigNumber>;

    admin_fee(overrides?: CallOverrides): Promise<BigNumber>;

    A(overrides?: CallOverrides): Promise<BigNumber>;

    A_precise(overrides?: CallOverrides): Promise<BigNumber>;

    get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

    "calc_token_amount(uint256[2],bool)"(
      _amounts: [BigNumberish, BigNumberish],
      _is_deposit: boolean,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "calc_token_amount(uint256[2],bool,bool)"(
      _amounts: [BigNumberish, BigNumberish],
      _is_deposit: boolean,
      _previous: boolean,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "add_liquidity(uint256[2],uint256)"(
      _amounts: [BigNumberish, BigNumberish],
      _min_mint_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "add_liquidity(uint256[2],uint256,address)"(
      _amounts: [BigNumberish, BigNumberish],
      _min_mint_amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "get_dy(int128,int128,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "get_dy(int128,int128,uint256,uint256[2])"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      _balances: [BigNumberish, BigNumberish],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "get_dy_underlying(int128,int128,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "get_dy_underlying(int128,int128,uint256,uint256[2])"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      _balances: [BigNumberish, BigNumberish],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "exchange(int128,int128,uint256,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "exchange(int128,int128,uint256,uint256,address)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "exchange_underlying(int128,int128,uint256,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "exchange_underlying(int128,int128,uint256,uint256,address)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "remove_liquidity(uint256,uint256[2])"(
      _burn_amount: BigNumberish,
      _min_amounts: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "remove_liquidity(uint256,uint256[2],address)"(
      _burn_amount: BigNumberish,
      _min_amounts: [BigNumberish, BigNumberish],
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "remove_liquidity_imbalance(uint256[2],uint256)"(
      _amounts: [BigNumberish, BigNumberish],
      _max_burn_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "remove_liquidity_imbalance(uint256[2],uint256,address)"(
      _amounts: [BigNumberish, BigNumberish],
      _max_burn_amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "calc_withdraw_one_coin(uint256,int128)"(
      _burn_amount: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "calc_withdraw_one_coin(uint256,int128,bool)"(
      _burn_amount: BigNumberish,
      i: BigNumberish,
      _previous: boolean,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "remove_liquidity_one_coin(uint256,int128,uint256)"(
      _burn_amount: BigNumberish,
      i: BigNumberish,
      _min_received: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "remove_liquidity_one_coin(uint256,int128,uint256,address)"(
      _burn_amount: BigNumberish,
      i: BigNumberish,
      _min_received: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    ramp_A(
      _future_A: BigNumberish,
      _future_time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    stop_ramp_A(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    admin_balances(
      i: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    withdraw_admin_fees(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    coins(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    balances(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    block_timestamp_last(overrides?: CallOverrides): Promise<BigNumber>;

    initial_A(overrides?: CallOverrides): Promise<BigNumber>;

    future_A(overrides?: CallOverrides): Promise<BigNumber>;

    initial_A_time(overrides?: CallOverrides): Promise<BigNumber>;

    future_A_time(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    initialize(
      _name: string,
      _symbol: string,
      _coin: string,
      _decimals: BigNumberish,
      _A: BigNumberish,
      _fee: BigNumberish,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    get_previous_balances(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    get_balances(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_twap_balances(
      _first_balances: [BigNumberish, BigNumberish],
      _last_balances: [BigNumberish, BigNumberish],
      _time_elapsed: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    get_price_cumulative_last(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    admin_fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    A(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    A_precise(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_virtual_price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "calc_token_amount(uint256[2],bool)"(
      _amounts: [BigNumberish, BigNumberish],
      _is_deposit: boolean,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    "calc_token_amount(uint256[2],bool,bool)"(
      _amounts: [BigNumberish, BigNumberish],
      _is_deposit: boolean,
      _previous: boolean,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    "add_liquidity(uint256[2],uint256)"(
      _amounts: [BigNumberish, BigNumberish],
      _min_mint_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "add_liquidity(uint256[2],uint256,address)"(
      _amounts: [BigNumberish, BigNumberish],
      _min_mint_amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "get_dy(int128,int128,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    "get_dy(int128,int128,uint256,uint256[2])"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      _balances: [BigNumberish, BigNumberish],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    "get_dy_underlying(int128,int128,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    "get_dy_underlying(int128,int128,uint256,uint256[2])"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      _balances: [BigNumberish, BigNumberish],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    "exchange(int128,int128,uint256,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "exchange(int128,int128,uint256,uint256,address)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "exchange_underlying(int128,int128,uint256,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "exchange_underlying(int128,int128,uint256,uint256,address)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "remove_liquidity(uint256,uint256[2])"(
      _burn_amount: BigNumberish,
      _min_amounts: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "remove_liquidity(uint256,uint256[2],address)"(
      _burn_amount: BigNumberish,
      _min_amounts: [BigNumberish, BigNumberish],
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "remove_liquidity_imbalance(uint256[2],uint256)"(
      _amounts: [BigNumberish, BigNumberish],
      _max_burn_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "remove_liquidity_imbalance(uint256[2],uint256,address)"(
      _amounts: [BigNumberish, BigNumberish],
      _max_burn_amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "calc_withdraw_one_coin(uint256,int128)"(
      _burn_amount: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    "calc_withdraw_one_coin(uint256,int128,bool)"(
      _burn_amount: BigNumberish,
      i: BigNumberish,
      _previous: boolean,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    "remove_liquidity_one_coin(uint256,int128,uint256)"(
      _burn_amount: BigNumberish,
      i: BigNumberish,
      _min_received: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "remove_liquidity_one_coin(uint256,int128,uint256,address)"(
      _burn_amount: BigNumberish,
      i: BigNumberish,
      _min_received: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    ramp_A(
      _future_A: BigNumberish,
      _future_time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    stop_ramp_A(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    admin_balances(
      i: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    withdraw_admin_fees(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coins(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    block_timestamp_last(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initial_A(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_A(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initial_A_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_A_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
